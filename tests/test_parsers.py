import pytest
from sboxmgr.subscription.parsers.base64_parser import Base64Parser
from sboxmgr.subscription.parsers.json_parser import JSONParser
from sboxmgr.subscription.parsers.uri_list_parser import URIListParser

SS_BASE64 = "YWVzLTI1Ni1nY206cGFzc0BleGFtcGxlLmNvbTo4Mzg4"  # pragma: allowlist secret
SS_URI = "ss://aes-256-gcm:pass@example.com:8388#ssuri"  # pragma: allowlist secret
VMESS_JSON = '{"type": "vmess", "address": "vm.com", "port": 443}'  # pragma: allowlist secret
MIXED_LIST = """
# comment
ss://YWVzLTI1Ni1nY206cGFzc0BleGFtcGxlLmNvbTo4Mzg4#emojiüöÄ?plugin=obfs  # pragma: allowlist secret
vmess://eyJhZGQiOiJ2bS5jb20iLCJwb3J0Ijo0NDN9  # pragma: allowlist secret
ss://aes-256-gcm:pass@example.com:8388#ssuri  # pragma: allowlist secret
"""
INVALID = "not a valid subscription"

@pytest.mark.parametrize("parser_cls, raw, should_fail, expect_ss", [
    (Base64Parser, SS_BASE64.encode(), False, True),
    (URIListParser, SS_URI.encode(), False, True),
    (JSONParser, VMESS_JSON.encode(), False, False),
    (URIListParser, MIXED_LIST.encode(), False, True),
    (Base64Parser, INVALID.encode(), True, False),
])
def test_parsers_edge_cases(parser_cls, raw, should_fail, expect_ss):
    parser = parser_cls()
    if should_fail:
        with pytest.raises(Exception):
            parser.parse(raw)
    else:
        servers = parser.parse(raw)
        if expect_ss:
            assert any(s.type == "ss" for s in servers)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º emoji/tag —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ MIXED_LIST, –Ω–æ –Ω–µ –≤ SS_URI)
        # if parser_cls is URIListParser and ...: # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è emoji 

def test_uri_list_parser_edge_cases():
    from sboxmgr.subscription.parsers.uri_list_parser import URIListParser
    parser = URIListParser()
    with open('src/sboxmgr/examples/example_uri_list.txt', 'rb') as f:
        raw = f.read()
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    types = {s.type for s in servers}
    assert 'ss' in types
    assert 'vless' in types
    assert 'vmess' in types
    assert 'trojan' in types
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç emoji –∏–ª–∏ unicode
    assert any('emoji' in (s.meta or {}).get('tag', '').lower() or 'üöÄ' in (s.meta or {}).get('tag', '') for s in servers)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    # (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω) 