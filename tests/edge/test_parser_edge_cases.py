import pytest
from sboxmgr.subscription.parsers.uri_list_parser import URIListParser
from sboxmgr.subscription.models import ParsedServer
from sboxmgr.subscription.manager import SubscriptionManager
from sboxmgr.subscription.models import SubscriptionSource, PipelineContext
from sboxmgr.subscription.middleware_base import MiddlewareChain, TagFilterMiddleware, EnrichMiddleware, BaseMiddleware, LoggingMiddleware

def test_mixed_protocols():
    raw = """
# comment
ss://YWVzLTI1Ni1nY206cGFzc3dvcmRAMTI3LjAuMC4xOjEyMzQ=#tag1
vless://uuid@host:443?encryption=none#label
vmess://eyJ2IjoiMiIsInBzIjoiVGVzdCIsImFkZCI6IjEyNy4wLjAuMSIsInBvcnQiOiI0NDMiLCJpZCI6InV1aWQiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6IiJ9
ss://method:password@host:8388#tag2?plugin=obfs-local;obfs=tls
emoji://üòÄ@host:1234
invalidline
""".encode("utf-8")
    parser = URIListParser()
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ParsedServer –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    assert isinstance(servers, list)
    assert len(servers) == 6  # 6 —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ unknown
    unknowns = [s for s in servers if getattr(s, 'type', None) == 'unknown']
    assert any(unknowns)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ss:// –∫–∞–∫ base64 –∏ –∫–∞–∫ URI –æ–±–∞ –ø–∞—Ä—Å—è—Ç—Å—è
    ss = [s for s in servers if getattr(s, 'type', None) == 'ss']
    assert len(ss) >= 2
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ emoji:// –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–∞–¥–µ–Ω–∏—é
    emoji = [s for s in servers if getattr(s, 'address', None) and 'üòÄ' in s.address]
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ emoji:// —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ø–∞–¥—ë—Ç –≤ unknown
    assert any(unknowns)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    assert servers[0] is not None  # –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç 

def test_middleware_chain_order_tagfilter_vs_enrich():
    from sboxmgr.subscription.manager import SubscriptionManager
    from sboxmgr.subscription.models import SubscriptionSource, ParsedServer, PipelineContext
    from sboxmgr.subscription.middleware_base import MiddlewareChain, TagFilterMiddleware, EnrichMiddleware
    # –î–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
    servers = [
        ParsedServer(type="ss", address="1.2.3.4", port=443, meta={"tag": "A"}),
        ParsedServer(type="ss", address="2.2.2.2", port=1234, meta={"tag": "B"}),
    ]
    class DummyFetcher:
        def __init__(self, source):
            self.source = source
        def fetch(self):
            return b''
    # 1. TagFilter -> Enrich (country —Ç–æ–ª—å–∫–æ —É B)
    context1 = PipelineContext()
    context1.tag_filters = ["B"]
    chain1 = MiddlewareChain([TagFilterMiddleware(), EnrichMiddleware()])
    src1 = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr1 = SubscriptionManager(src1, middleware_chain=chain1)
    mgr1.fetcher = DummyFetcher(src1)
    mgr1.detect_parser = lambda raw, t: type('P', (), { 'parse': lambda self, raw: servers })()
    result1 = mgr1.get_servers(context=context1)
    assert result1.success, f"Pipeline failed, errors: {result1.errors}"
    assert all(s.meta.get("country") == "??" for s in result1.config)
    assert [s.meta.get("tag") for s in result1.config] == ["B"]
    # 2. Enrich -> TagFilter (country —É –≤—Å–µ—Ö, –Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    context2 = PipelineContext()
    context2.tag_filters = ["B"]
    chain2 = MiddlewareChain([EnrichMiddleware(), TagFilterMiddleware()])
    src2 = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr2 = SubscriptionManager(src2, middleware_chain=chain2)
    mgr2.fetcher = DummyFetcher(src2)
    mgr2.detect_parser = lambda raw, t: type('P', (), { 'parse': lambda self, raw: servers })()
    result2 = mgr2.get_servers(context=context2)
    assert result2.success, f"Pipeline failed, errors: {result2.errors}"
    assert all(s.meta.get("country") == "??" for s in result2.config)
    assert [s.meta.get("tag") for s in result2.config] == ["B"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ country —Ç–æ–ª—å–∫–æ —É B, –≤–æ –≤—Ç–æ—Ä–æ–º ‚Äî —É –≤—Å–µ—Ö (–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    # (–í –¥–∞–Ω–Ω–æ–º stub-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å–ª–∏ enrich –±—ã–ª –±—ã –¥–æ—Ä–æ–≥–∏–º ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –±—ã–ª–∞ –±—ã –≤–∞–∂–Ω–∞) 

def test_middleware_empty_chain_noop():
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert result == servers

def test_middleware_with_error_accumulates():
    class ErrorMiddleware(BaseMiddleware):
        def process(self, servers, context):
            raise ValueError("middleware error")
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([ErrorMiddleware()])
    context = PipelineContext()
    try:
        chain.process(servers, context)
    except Exception as e:
        assert "middleware error" in str(e)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∞ –Ω–µ –ø–∞–¥–∞—Ç—å ‚Äî —ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ SubscriptionManager

def test_middleware_multiple_same_order():
    class AddTagMiddleware(BaseMiddleware):
        def __init__(self, tag):
            self.tag = tag
        def process(self, servers, context):
            for s in servers:
                s.meta["tag"] = self.tag
            return servers
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    chain = MiddlewareChain([AddTagMiddleware("A"), AddTagMiddleware("B")])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert all(s.meta["tag"] == "B" for s in result)

def test_logging_middleware_debug_output(capsys):
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    chain = MiddlewareChain([LoggingMiddleware("teststage")])
    context = PipelineContext()
    context.debug_level = 1
    chain.process(servers, context)
    captured = capsys.readouterr()
    assert "[DEBUG][teststage]" in captured.out

def test_middleware_empty_servers():
    servers = []
    chain = MiddlewareChain([EnrichMiddleware()])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert result == []

def test_tagfilter_middleware_no_tagfilters():
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([TagFilterMiddleware()])
    context = PipelineContext()  # –Ω–µ—Ç tag_filters
    result = chain.process(servers, context)
    assert result == servers 

def test_tagfilter_middleware_invalid_input():
    from sboxmgr.subscription.middleware_base import TagFilterMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = TagFilterMiddleware()
    # –ù–µ list
    context = PipelineContext()
    context.tag_filters = "A"
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-list tag_filters"
    except ValueError as e:
        assert "list" in str(e)
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = ["A" * 100]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for too long tag"
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = [123]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-str tag"
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ printable
    context.tag_filters = ["A\x00B"]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-printable tag"
    except ValueError as e:
        assert "Invalid tag" in str(e) 

def test_enrichmiddleware_external_lookup_timeout(monkeypatch):
    """Edge-case: EnrichMiddleware –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ (SEC-MW-04)."""
    from sboxmgr.subscription.middleware_base import EnrichMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    import time
    class BadEnrich(EnrichMiddleware):
        def process(self, servers, context):
            time.sleep(2)  # —ç–º—É–ª–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
            return super().process(servers, context)
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    import signal
    def handler(signum, frame):
        raise TimeoutError("Enrichment took too long (no timeout)")
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ enrichment
    try:
        BadEnrich().process(servers, context)
        assert False, "EnrichMiddleware must not do long external lookup without timeout"
    except TimeoutError:
        pass
    finally:
        signal.alarm(0)

def test_hookmiddleware_privilege_escalation():
    """Edge-case: HookMiddleware –Ω–µ –º–æ–∂–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, –≤—Å–µ —Ö—É–∫–∏ sandboxed (SEC-MW-06)."""
    from sboxmgr.subscription.middleware_base import BaseMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    class EvilHookMiddleware(BaseMiddleware):
        def process(self, servers, context):
            # –ü–æ–ø—ã—Ç–∫–∞ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (—ç–º—É–ª–∏—Ä—É–µ–º)
            try:
                import os
                os.setuid(0)  # –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å root
            except Exception as e:
                return servers  # sandbox: –Ω–µ –¥–∞—ë–º —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å
            assert False, "HookMiddleware must not be able to escalate privileges!"
            return servers
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    EvilHookMiddleware().process(servers, context)  # –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å root 

def test_parser_malicious_payload_large_json():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π JSON (DoS) –∏ –Ω–µ –ø–∞–¥–∞—Ç—å."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    from sboxmgr.subscription.models import PipelineContext
    parser = JSONParser()
    # –û–≥—Ä–æ–º–Ω—ã–π JSON (–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    raw = ("{" + ",".join(f'\"k{i}\":1' for i in range(100_000)) + "}").encode()
    try:
        servers = parser.parse(raw)
        assert isinstance(servers, list)
    except Exception as e:
        assert "too large" in str(e) or "memory" in str(e) or isinstance(e, Exception)

def test_parser_malicious_payload_eval():
    """Edge-case: Parser –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å eval/exec –∏–∑ payload (–∏–Ω—ä–µ–∫—Ü–∏—è)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    parser = JSONParser()
    # Payload —Å eval-–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–ª–µ–º
    raw = b'{"type": "ss", "address": "1.2.3.4", "port": 443, "meta": {"__import__": "os", "os.system": "rm -rf /"}}'
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ suspicious –ø–æ–ª—è –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥–∞
    for s in servers:
        assert not hasattr(s, '__import__')
        assert not hasattr(s, 'os')
        assert not hasattr(s, 'system')
        if hasattr(s, 'meta'):
            assert '__import__' in s.meta or 'os.system' in s.meta

def test_parser_malicious_payload_unexpected_structure():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Å–ø–∏—Å–æ–∫, –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    parser = JSONParser()
    # Payload ‚Äî —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    raw = b'[1, 2, 3, {"type": "ss", "address": "1.2.3.4", "port": 443}]'
    servers = parser.parse(raw)
    assert isinstance(servers, list)
    # Payload ‚Äî deeply nested
    raw = b'{"a": {"b": {"c": {"d": {"e": 1}}}}}'
    servers = parser.parse(raw)
    assert isinstance(servers, list) 