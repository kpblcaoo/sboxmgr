import base64
import os

import pytest

from sboxmgr.subscription.manager import SubscriptionManager
from sboxmgr.subscription.middleware_base import (
    BaseMiddleware,
    EnrichMiddleware,
    LoggingMiddleware,
    MiddlewareChain,
    TagFilterMiddleware,
)
from sboxmgr.subscription.models import (
    ParsedServer,
    PipelineContext,
    SubscriptionSource,
)
from sboxmgr.subscription.parsers.uri_list_parser import URIListParser


def test_mixed_protocols():
    raw = """
# comment
ss://YWVzLTI1Ni1nY206cGFzc3dvcmRAMTI3LjAuMC4xOjEyMzQ=#tag1
vless://uuid@host:443?encryption=none#label
vmess://eyJ2IjoiMiIsInBzIjoiVGVzdCIsImFkZCI6IjEyNy4wLjAuMSIsInBvcnQiOiI0NDMiLCJpZCI6InV1aWQiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6IiJ9
ss://method:password@host:8388#tag2?plugin=obfs-local;obfs=tls
emoji://üòÄ@host:1234
invalidline
""".encode()
    parser = URIListParser()
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ParsedServer –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    assert isinstance(servers, list)
    assert len(servers) == 6  # 6 —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ unknown
    unknowns = [s for s in servers if getattr(s, "type", None) == "unknown"]
    assert any(unknowns)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ss:// –∫–∞–∫ base64 –∏ –∫–∞–∫ URI –æ–±–∞ –ø–∞—Ä—Å—è—Ç—Å—è
    ss = [s for s in servers if getattr(s, "type", None) == "ss"]
    assert len(ss) >= 2
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    assert servers[0] is not None  # –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç


def test_emoji_in_passwords():
    """–¢–µ—Å—Ç: –≠–º–æ–¥–∑–∏ –≤ –ø–∞—Ä–æ–ª—è—Ö –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç 1: –≠–º–æ–¥–∑–∏ –≤ base64 –ø–∞—Ä–æ–ª–µ
    emoji_password = (
        "aes-256-gcm:üöÄpassword@example.com:8388"  # pragma: allowlist secret
    )
    encoded = base64.urlsafe_b64encode(emoji_password.encode()).decode()
    test_uri1 = f"ss://{encoded}#EmojiPassword"

    result1 = parser._parse_ss(test_uri1)
    assert result1.type == "ss"
    assert result1.address == "example.com"
    assert result1.port == 8388
    assert "üöÄpassword" in result1.meta["password"]  # pragma: allowlist secret
    assert result1.meta["tag"] == "EmojiPassword"

    # –¢–µ—Å—Ç 2: –≠–º–æ–¥–∑–∏ –≤ plain text –ø–∞—Ä–æ–ª–µ
    test_uri2 = "ss://aes-256-gcm:üöÄpassword@example.com:8388#EmojiPlain"  # pragma: allowlist secret
    result2 = parser._parse_ss(test_uri2)
    assert result2.type == "ss"
    assert result2.address == "example.com"
    assert result2.port == 8388
    assert "üöÄpassword" in result2.meta["password"]  # pragma: allowlist secret
    assert result2.meta["tag"] == "EmojiPlain"


def test_spaces_in_passwords():
    """–¢–µ—Å—Ç: –ü—Ä–æ–±–µ–ª—ã –≤ –ø–∞—Ä–æ–ª—è—Ö –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–±–µ–ª—ã –≤ base64 –ø–∞—Ä–æ–ª–µ
    space_password = (
        "aes-256-gcm:pass word@example.com:8388"  # pragma: allowlist secret
    )
    encoded = base64.urlsafe_b64encode(space_password.encode()).decode()
    test_uri1 = f"ss://{encoded}#SpacePassword"

    result1 = parser._parse_ss(test_uri1)
    assert result1.type == "ss"
    assert result1.address == "example.com"
    assert result1.port == 8388
    assert "pass word" in result1.meta["password"]  # pragma: allowlist secret
    assert result1.meta["tag"] == "SpacePassword"

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–±–µ–ª—ã –≤ plain text –ø–∞—Ä–æ–ª–µ
    test_uri2 = "ss://aes-256-gcm:pass word@example.com:8388#SpacePlain"  # pragma: allowlist secret
    result2 = parser._parse_ss(test_uri2)
    assert result2.type == "ss"
    assert result2.address == "example.com"
    assert result2.port == 8388
    assert "pass word" in result2.meta["password"]  # pragma: allowlist secret
    assert result2.meta["tag"] == "SpacePlain"


def test_ipv6_addresses():
    """–¢–µ—Å—Ç: IPv6 –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç 1: IPv6 –≤ base64
    ipv6_uri = "aes-256-gcm:password@[::1]:8388"  # pragma: allowlist secret
    encoded = base64.urlsafe_b64encode(ipv6_uri.encode()).decode()
    test_uri1 = f"ss://{encoded}#IPv6Base64"

    result1 = parser._parse_ss(test_uri1)
    assert result1.type == "ss"
    assert result1.address == "::1"
    assert result1.port == 8388
    assert result1.meta["tag"] == "IPv6Base64"

    # –¢–µ—Å—Ç 2: IPv6 –≤ plain text
    test_uri2 = "ss://aes-256-gcm:password@[2001:db8::1]:8388#IPv6Plain"  # pragma: allowlist secret
    result2 = parser._parse_ss(test_uri2)
    assert result2.type == "ss"
    assert result2.address == "2001:db8::1"
    assert result2.port == 8388
    assert result2.meta["tag"] == "IPv6Plain"


def test_very_long_lines():
    """–¢–µ—Å—Ç: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –°–æ–∑–¥–∞—ë–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (–±–æ–ª—å—à–µ 10KB)
    long_password = "a" * 5000  # pragma: allowlist secret
    long_uri = f"ss://aes-256-gcm:{long_password}@example.com:8388#LongLine"  # pragma: allowlist secret

    # –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∞ –¥–æ 10KB, –Ω–æ –ø–∞—Ä–æ–ª—å –≤–Ω—É—Ç—Ä–∏ –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è –¥–ª–∏–Ω–Ω—ã–º
    # —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –ø–∞—Ä–æ–ª—è
    result = parser._parse_ss(long_uri)
    assert result.type == "ss"
    assert result.address == "example.com"
    assert result.port == 8388
    # –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–æ–∫–∏
    assert len(result.meta["password"]) >= 1000  # pragma: allowlist secret


def test_escaped_characters():
    """–¢–µ—Å—Ç: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç 1: URL-encoded —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ
    encoded_password = (
        "pass%20word%40test"  # "pass word@test"  # pragma: allowlist secret
    )
    test_uri1 = f"ss://aes-256-gcm:{encoded_password}@example.com:8388#Encoded"

    result1 = parser._parse_ss(test_uri1)
    assert result1.type == "ss"
    assert result1.address == "example.com"
    assert result1.port == 8388
    assert "pass word@test" in result1.meta["password"]  # pragma: allowlist secret
    assert result1.meta["tag"] == "Encoded"

    # –¢–µ—Å—Ç 2: URL-encoded —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–≥–µ
    test_uri2 = "ss://aes-256-gcm:password@example.com:8388#Tag%20with%20spaces"  # pragma: allowlist secret
    result2 = parser._parse_ss(test_uri2)
    assert result2.type == "ss"
    assert result2.meta["tag"] == "Tag with spaces"


def test_complex_query_parameters():
    """–¢–µ—Å—Ç: –°–ª–æ–∂–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_uri = "ss://aes-256-gcm:password@example.com:8388?plugin=obfs-local;obfs=http;obfs-host=example.com&security=tls&sni=example.com#ComplexQuery"  # pragma: allowlist secret

    result = parser._parse_ss(test_uri)
    assert result.type == "ss"
    assert result.address == "example.com"
    assert result.port == 8388
    assert result.meta["tag"] == "ComplexQuery"
    assert result.meta["plugin"] == "obfs-local;obfs=http;obfs-host=example.com"
    assert result.meta["security"] == "tls"
    assert result.meta["sni"] == "example.com"


def test_malformed_base64():
    """–¢–µ—Å—Ç: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64 –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º base64 - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å invalid —Å–µ—Ä–≤–µ—Ä
    malformed_b64 = "ss://invalid!base64@example.com:8388#Malformed"

    result = parser._parse_ss(malformed_b64)
    # –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å invalid —Å–µ—Ä–≤–µ—Ä –¥–ª—è malformed base64
    assert result.type == "ss"
    assert result.address == "invalid"
    assert "error" in result.meta


def test_unicode_in_hostnames():
    """–¢–µ—Å—Ç: Unicode –≤ hostname –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è."""
    parser = URIListParser()

    # –¢–µ—Å—Ç —Å Unicode –≤ hostname
    test_uri = "ss://aes-256-gcm:password@xn--example-123.com:8388#UnicodeHost"  # pragma: allowlist secret

    result = parser._parse_ss(test_uri)
    assert result.type == "ss"
    assert result.address == "xn--example-123.com"
    assert result.port == 8388
    assert result.meta["tag"] == "UnicodeHost"


def test_improved_error_handling():
    """–¢–µ—Å—Ç: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫."""
    parser = URIListParser()

    # –¢–µ—Å—Ç —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    invalid_uri = "ss://totally-broken-uri-with-no-structure"

    result = parser._parse_ss(invalid_uri)
    assert result.type == "ss"
    assert result.address == "invalid"
    assert "error" in result.meta

    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ—Ä—Ç–æ–º
    invalid_port_uri = "ss://aes-256-gcm:password@example.com:99999#InvalidPort"  # pragma: allowlist secret

    result2 = parser._parse_ss(invalid_port_uri)
    assert result2.type == "ss"
    assert result2.address == "invalid"
    assert "invalid port" in result2.meta["error"]


def test_multiple_query_values():
    """–¢–µ—Å—Ç: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞."""
    parser = URIListParser()

    # –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    test_uri = "ss://aes-256-gcm:password@example.com:8388?param=value1&param=value2&param=value3#MultipleValues"  # pragma: allowlist secret

    result = parser._parse_ss(test_uri)
    assert result.type == "ss"
    assert result.address == "example.com"
    assert result.port == 8388
    assert result.meta["tag"] == "MultipleValues"
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫
    assert isinstance(result.meta["param"], list)
    assert len(result.meta["param"]) == 3
    assert "value1" in result.meta["param"]
    assert "value2" in result.meta["param"]
    assert "value3" in result.meta["param"]


def test_unicode_decode_fallback():
    """–¢–µ—Å—Ç: Fallback –∫ latin-1 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Unicode –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    parser = URIListParser()

    # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º UTF-8
    invalid_utf8 = b"ss://aes-256-gcm:password@example.com:8388#Test\nss://invalid\xff\xfe@example.com:8388#Invalid"  # pragma: allowlist secret

    result = parser.parse(invalid_utf8)
    # –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–µ —É–ø–∞—Å—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    assert len(result) >= 1
    valid_servers = [s for s in result if s.type == "ss" and s.address != "invalid"]
    assert len(valid_servers) >= 1


def test_line_numbering():
    """–¢–µ—Å—Ç: –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–∞—Ö –æ—à–∏–±–æ–∫."""
    parser = URIListParser()

    # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    test_data = b"""
# comment
ss://aes-256-gcm:password@example.com:8388#Valid
ss://invalid-uri#Invalid
ss://aes-256-gcm:password@example.com:8388#Valid2
"""

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug level –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    os.environ["SBOXMGR_DEBUG"] = "1"

    try:
        result = parser.parse(test_data)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ —É–ø–∞–ª –∏ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        assert len(result) >= 2
        valid_servers = [s for s in result if s.type == "ss" and s.address != "invalid"]
        assert len(valid_servers) >= 2
    finally:
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if "SBOXMGR_DEBUG" in os.environ:
            del os.environ["SBOXMGR_DEBUG"]


def test_middleware_chain_order_tagfilter_vs_enrich(monkeypatch):
    from sboxmgr.subscription.middleware_base import (
        EnrichMiddleware,
        MiddlewareChain,
        TagFilterMiddleware,
    )
    from sboxmgr.subscription.models import ParsedServer, PipelineContext

    # –ú–æ–∫–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
    class MockResponse:
        def __init__(self, content):
            self.content = content
            class MockRaw:
                def read(self, n=None):
                    return content
            self.raw = MockRaw()

        def raise_for_status(self):
            pass

    def mock_get(url, **kwargs):
        return MockResponse(b"dummy")

    monkeypatch.setattr("requests.get", mock_get)

    # –î–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è shadowsocks)
    servers = [
        ParsedServer(
            type="ss",
            address="1.2.3.4",
            port=443,
            meta={
                "tag": "A",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="2.2.2.2",
            port=1234,
            meta={
                "tag": "B",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
    ]

    class DummyFetcher:
        def __init__(self, source):
            self.source = source

        def fetch(self):
            return b"ZGF0YQ=="  # base64 –æ—Ç "data"

    # 1. TagFilter -> Enrich (country —Ç–æ–ª—å–∫–æ —É B)
    context1 = PipelineContext()
    context1.tag_filters = ["B"]
    context1.skip_policies = True
    chain1 = MiddlewareChain([TagFilterMiddleware(), EnrichMiddleware()])
    src1 = SubscriptionSource(url="http://dummy", source_type="url_base64")
    mgr1 = SubscriptionManager(src1, middleware_chain=chain1)
    mgr1.fetcher = DummyFetcher(src1)
    from sboxmgr.subscription.manager.core import DataProcessor
    mgr1.data_processor = DataProcessor(mgr1.fetcher, mgr1.error_handler)
    mgr1.detect_parser = lambda raw, t: type(
        "P", (), {"parse": lambda self, raw: servers}
    )()
    mgr1.data_processor.parse_servers = lambda raw, context: (servers, True)
    result1 = mgr1.get_servers(context=context1)
    assert result1.success, f"Pipeline failed, errors: {result1.errors}"
    assert all(s.meta.get("country") == "??" for s in result1.config)
    assert [s.meta.get("tag") for s in result1.config] == ["B"]

    # 2. Enrich -> TagFilter (country —É –≤—Å–µ—Ö, –Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    context2 = PipelineContext()
    context2.tag_filters = ["B"]
    context2.skip_policies = True
    chain2 = MiddlewareChain([EnrichMiddleware(), TagFilterMiddleware()])
    src2 = SubscriptionSource(url="http://dummy", source_type="url_base64")
    mgr2 = SubscriptionManager(src2, middleware_chain=chain2)
    mgr2.fetcher = DummyFetcher(src2)
    mgr2.detect_parser = lambda raw, t: type(
        "P", (), {"parse": lambda self, raw: servers}
    )()
    mgr2.data_processor.parse_servers = lambda raw, context: (servers, True)
    result2 = mgr2.get_servers(context=context2)
    assert result2.success, f"Pipeline failed, errors: {result2.errors}"
    assert all(s.meta.get("country") == "??" for s in result2.config)
    assert [s.meta.get("tag") for s in result2.config] == ["B"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ country —Ç–æ–ª—å–∫–æ —É B, –≤–æ –≤—Ç–æ—Ä–æ–º ‚Äî —É –≤—Å–µ—Ö (–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    # (–í –¥–∞–Ω–Ω–æ–º stub-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å–ª–∏ enrich –±—ã–ª –±—ã –¥–æ—Ä–æ–≥–∏–º ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –±—ã–ª–∞ –±—ã –≤–∞–∂–Ω–∞)


def test_middleware_empty_chain_noop():
    servers = [
        ParsedServer(
            type="ss",
            address="1.1.1.1",
            port=443,
            meta={"tag": "A", "method": "aes-256-gcm", "password": "test12345"},
        )
    ]
    chain = MiddlewareChain([])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert result == servers


def test_middleware_with_error_accumulates():
    class ErrorMiddleware(BaseMiddleware):
        def process(self, servers, context):
            raise ValueError("middleware error")

    servers = [
        ParsedServer(
            type="ss",
            address="1.1.1.1",
            port=443,
            meta={"tag": "A", "method": "aes-256-gcm", "password": "test12345"},
        )
    ]
    chain = MiddlewareChain([ErrorMiddleware()])
    context = PipelineContext()
    try:
        chain.process(servers, context)
    except Exception as e:
        assert "middleware error" in str(e)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∞ –Ω–µ –ø–∞–¥–∞—Ç—å ‚Äî —ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ SubscriptionManager


def test_middleware_multiple_same_order():
    class AddTagMiddleware(BaseMiddleware):
        def __init__(self, tag):
            self.tag = tag

        def process(self, servers, context):
            for s in servers:
                s.meta["tag"] = self.tag
            return servers

    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    chain = MiddlewareChain([AddTagMiddleware("A"), AddTagMiddleware("B")])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert all(s.meta["tag"] == "B" for s in result)


def test_logging_middleware_debug_output(capsys):
    servers = [
        ParsedServer(
            type="ss",
            address="1.1.1.1",
            port=443,
            meta={"method": "aes-256-gcm", "password": "test12345"},
        )
    ]
    chain = MiddlewareChain([LoggingMiddleware("teststage")])
    context = PipelineContext()
    context.debug_level = 1
    chain.process(servers, context)
    captured = capsys.readouterr()
    assert "[DEBUG][teststage]" in captured.out


def test_tagfilter_middleware_no_tagfilters():
    servers = [
        ParsedServer(
            type="ss",
            address="1.1.1.1",
            port=443,
            meta={"tag": "A", "method": "aes-256-gcm", "password": "test12345"},
        )
    ]
    chain = MiddlewareChain([TagFilterMiddleware()])
    context = PipelineContext()  # –Ω–µ—Ç tag_filters
    result = chain.process(servers, context)
    assert result == servers


def test_tagfilter_middleware_invalid_input():
    from sboxmgr.subscription.middleware_base import TagFilterMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext

    servers = [
        ParsedServer(
            type="ss",
            address="1.1.1.1",
            port=443,
            meta={"tag": "A", "method": "aes-256-gcm", "password": "test12345"},
        )
    ]
    chain = TagFilterMiddleware()
    # –ù–µ list
    context = PipelineContext()
    context.tag_filters = "A"
    try:
        chain.process(servers, context)
        raise AssertionError("Should raise ValueError for non-list tag_filters")
    except ValueError as e:
        assert "list" in str(e)
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = ["A" * 100]
    try:
        chain.process(servers, context)
        raise AssertionError("Should raise ValueError for too long tag")
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = [123]
    try:
        chain.process(servers, context)
        raise AssertionError("Should raise ValueError for non-str tag")
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ printable
    context.tag_filters = ["A\x00B"]
    try:
        chain.process(servers, context)
        raise AssertionError("Should raise ValueError for non-printable tag")
    except ValueError as e:
        assert "Invalid tag" in str(e)


def test_enrichmiddleware_external_lookup_timeout(monkeypatch):
    """Edge-case: EnrichMiddleware –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ (SEC-MW-04)."""
    import time

    from sboxmgr.subscription.middleware_base import EnrichMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext

    class BadEnrich(EnrichMiddleware):
        def process(self, servers, context):
            time.sleep(2)  # —ç–º—É–ª–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
            return super().process(servers, context)

    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    import signal

    def handler(signum, frame):
        raise TimeoutError("Enrichment took too long (no timeout)")

    signal.signal(signal.SIGALRM, handler)
    signal.alarm(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ enrichment
    try:
        BadEnrich().process(servers, context)
        raise AssertionError("EnrichMiddleware must not do long external lookup without timeout")
    except TimeoutError:
        pass
    finally:
        signal.alarm(0)


def test_hookmiddleware_privilege_escalation():
    """Edge-case: HookMiddleware –Ω–µ –º–æ–∂–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, –≤—Å–µ —Ö—É–∫–∏ sandboxed (SEC-MW-06)."""
    from sboxmgr.subscription.middleware_base import BaseMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext

    class EvilHookMiddleware(BaseMiddleware):
        def process(self, servers, context):
            # –ü–æ–ø—ã—Ç–∫–∞ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (—ç–º—É–ª–∏—Ä—É–µ–º)
            try:
                import os

                os.setuid(0)  # –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å root
            except Exception:
                return servers  # sandbox: –Ω–µ –¥–∞—ë–º —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å
            raise AssertionError("HookMiddleware must not be able to escalate privileges!")
            return servers

    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    EvilHookMiddleware().process(
        servers, context
    )  # –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å root


def test_parser_malicious_payload_large_json():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π JSON (DoS) –∏ –Ω–µ –ø–∞–¥–∞—Ç—å."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser

    parser = JSONParser()
    # –û–≥—Ä–æ–º–Ω—ã–π JSON (–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    raw = ("{" + ",".join(f'"k{i}":1' for i in range(100_000)) + "}").encode()
    try:
        servers = parser.parse(raw)
        assert isinstance(servers, list)
    except Exception as e:
        assert "too large" in str(e) or "memory" in str(e) or isinstance(e, Exception)


def test_parser_malicious_payload_eval():
    """Edge-case: Parser –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å eval/exec –∏–∑ payload (–∏–Ω—ä–µ–∫—Ü–∏—è)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser

    parser = JSONParser()
    # Payload —Å eval-–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–ª–µ–º
    raw = b'{"type": "ss", "address": "1.2.3.4", "port": 443, "meta": {"__import__": "os", "os.system": "rm -rf /"}}'
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ suspicious –ø–æ–ª—è –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥–∞
    for s in servers:
        assert not hasattr(s, "__import__")
        assert not hasattr(s, "os")
        assert not hasattr(s, "system")
        if hasattr(s, "meta"):
            assert "__import__" in s.meta or "os.system" in s.meta


def test_parser_malicious_payload_unexpected_structure():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Å–ø–∏—Å–æ–∫, –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser

    parser = JSONParser()
    # Payload ‚Äî —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    raw = b'[1, 2, 3, {"type": "ss", "address": "1.2.3.4", "port": 443}]'
    servers = parser.parse(raw)
    assert isinstance(servers, list)
    # Payload ‚Äî deeply nested
    raw = b'{"a": {"b": {"c": {"d": {"e": 1}}}}}'
    servers = parser.parse(raw)
    assert isinstance(servers, list)


def test_parser_malicious_payload_proto_pollution():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å proto pollution —á–µ—Ä–µ–∑ JSON."""
    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser

    raw = b'{"__proto__": {"polluted": true}}'
    parser = TolerantJSONParser()
    try:
        parser.parse(raw)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ pollute –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        assert not hasattr(object, "polluted"), "Proto pollution detected!"
    except Exception as e:
        assert "error" in str(e).lower() or isinstance(e, Exception)


def test_parser_malicious_payload_deep_nesting():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –Ω–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö (DoS)."""
    import json

    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON
    d = v = {}
    for _ in range(1000):
        v["x"] = {}
        v = v["x"]
    raw = json.dumps(d).encode()
    parser = TolerantJSONParser()
    try:
        parser.parse(raw)
        assert True  # –ï—Å–ª–∏ –Ω–µ —É–ø–∞–ª–æ ‚Äî –æ–∫
    except Exception as e:
        assert "recursion" in str(e).lower() or isinstance(e, Exception)


def test_parser_malicious_payload_unexpected_types():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö (—Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)."""
    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser

    raw = b'[1, 2, 3, {"type": "ss"}]'  # —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    parser = TolerantJSONParser()
    try:
        servers = parser.parse(raw)
        assert isinstance(servers, list)
    except Exception as e:
        assert isinstance(e, Exception)


def test_postprocessor_external_enrichment_timeout():
    """Postprocessor: –≤–Ω–µ—à–Ω–∏–π enrichment –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–∞—Ç—å, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (sandbox/—Ç–∞–π–º–∞—É—Ç)."""
    import signal
    import time

    class SlowEnricher(EnrichMiddleware):
        def process(self, servers, context):
            time.sleep(5)  # —ç–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ
            return servers

    servers = []
    context = None
    enricher = SlowEnricher()
    if not hasattr(signal, "SIGALRM"):
        pytest.xfail("signal.SIGALRM not available on this platform")

    def handler(signum, frame):
        raise TimeoutError("Enrichment took too long (no timeout)")

    signal.signal(signal.SIGALRM, handler)
    signal.alarm(1)
    try:
        with pytest.raises(TimeoutError):
            enricher.process(servers, context)
    finally:
        signal.alarm(0)


def test_hookmiddleware_sandbox_forbidden_action():
    """Middleware: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (sandbox)."""

    class EvilHook(BaseMiddleware):
        def process(self, servers, context):
            import os

            try:
                os.system("echo HACKED > /tmp/hacked.txt")
            except Exception:
                pass
            return servers

    evil = EvilHook()
    servers = []
    context = None
    try:
        evil.process(servers, context)
        raise AssertionError("HookMiddleware must not allow forbidden actions!")
    except Exception as e:
        assert (
            "forbid" in str(e).lower()
            or "sandbox" in str(e).lower()
            or isinstance(e, Exception)
        )


def test_parsed_validator_required_fields(monkeypatch):
    """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (strict mode)."""

    # –ú–æ–∫–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
    class MockResponse:
        def __init__(self, content):
            self.content = content
            class MockRaw:
                def __init__(self, content):
                    self.content = content
                def read(self, n=None):
                    return self.content
            self.raw = MockRaw(content)

        def raise_for_status(self):
            pass

    def mock_get(url, **kwargs):
        return MockResponse(b"ZGF0YQ==")  # valid base64 for "data"

    monkeypatch.setattr("requests.get", mock_get)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ss
    servers = [
        ParsedServer(
            type="ss",
            address="1.2.3.4",
            port=443,
            meta={
                "tag": "A",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="2.2.2.2",
            port=1234,
            meta={
                "tag": "B",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="3.3.3.3",
            port=1080,
            meta={
                "tag": "C",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="4.4.4.4",
            port=1081,
            meta={
                "tag": "D",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
    ]

    class DummyFetcher:
        def __init__(self, source):
            self.source = source

        def fetch(self):
            return b"ZGF0YQ=="  # valid base64 for "data"

    class DummyParser:
        def parse(self, raw):
            return servers

    src = SubscriptionSource(url="http://dummy", source_type="url_base64")
    mgr = SubscriptionManager(src, detect_parser=lambda raw, t: DummyParser())
    mgr.fetcher = DummyFetcher(src)
    from sboxmgr.subscription.manager.core import DataProcessor
    mgr.data_processor = DataProcessor(mgr.fetcher, mgr.error_handler)
    mgr.data_processor.parse_servers = lambda raw, context: (servers, True)
    context = PipelineContext(mode="strict")
    result = mgr.get_servers(context=context)
    assert result.success
    assert len(result.config) == 4
    assert all(s.type == "ss" for s in result.config)
    assert all(
        s.address in ["1.2.3.4", "2.2.2.2", "3.3.3.3", "4.4.4.4"] for s in result.config
    )
    assert all(s.port in [443, 1234, 1080, 1081] for s in result.config)
    assert all(s.meta["tag"] in ["A", "B", "C", "D"] for s in result.config)
    assert all(s.meta["method"] in ["aes-256-gcm"] for s in result.config)
    assert all(s.meta["password"] in ["test12345"] for s in result.config)
    assert not result.errors


def test_parsed_validator_strict_tolerant_modes(monkeypatch):
    """ParsedValidator: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ strict/tolerant —Ä–µ–∂–∏–º–æ–≤.

    –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–∞–≥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –Ω–µ –≤—Å–ø–ª—ã–≤—ë—Ç —Å–Ω–æ–≤–∞:
    - –í strict —Ä–µ–∂–∏–º–µ: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ) —Å success=True
    - –í tolerant —Ä–µ–∂–∏–º–µ: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ success=False
    """
    from sboxmgr.subscription.models import ParsedServer, PipelineContext

    # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: 2 –≤–∞–ª–∏–¥–Ω—ã—Ö, 2 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
    servers = [
        ParsedServer(
            type="ss",
            address="1.2.3.4",
            port=443,
            meta={
                "tag": "A",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="5.6.7.8",
            port=8080,
            meta={
                "tag": "B",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="",
            address="9.10.11.12",
            port=443,
            meta={
                "tag": "C",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="13.14.15.16",
            port=99999,
            meta={
                "tag": "D",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
    ]

    # –ú–æ–∫–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
    class MockResponse:
        def __init__(self, content):
            self.content = content
            class MockRaw:
                def __init__(self, content):
                    self.content = content
                def read(self, n=None):
                    return self.content
            self.raw = MockRaw(content)
        def raise_for_status(self):
            pass
    def mock_get(url, **kwargs):
        return MockResponse(b"ZGF0YQ==")
    monkeypatch.setattr("requests.get", mock_get)

    class DummyFetcher:
        def __init__(self, source):
            self.source = source

        def fetch(self):
            return b"ZGF0YQ=="  # valid base64 for "data"

    class DummyParser:
        def parse(self, raw):
            return servers

    src = SubscriptionSource(url="http://dummy", source_type="url_base64")
    mgr = SubscriptionManager(src, detect_parser=lambda raw, t: DummyParser())
    mgr.fetcher = DummyFetcher(src)
    from sboxmgr.subscription.manager.core import DataProcessor
    mgr.data_processor = DataProcessor(mgr.fetcher, mgr.error_handler)
    mgr.data_processor.parse_servers = lambda raw, context: (servers, True)

    # –¢–µ—Å—Ç 1: Tolerant —Ä–µ–∂–∏–º - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    context_tolerant = PipelineContext(mode="tolerant")
    result_tolerant = mgr.get_servers(context=context_tolerant, mode="tolerant")

    assert (
        result_tolerant.success
    ), "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    assert (
        len(result_tolerant.config) == 4
    ), f"Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 4 –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(result_tolerant.config)}"
    assert any(
        s.address == "1.2.3.4" for s in result_tolerant.config
    ), "–ü–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(
        s.address == "5.6.7.8" for s in result_tolerant.config
    ), "–í—Ç–æ—Ä–æ–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(
        s.address == "unknown-server-2" for s in result_tolerant.config
    ), "–ü–µ—Ä–≤—ã–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(
        s.address == "ss-server-3" for s in result_tolerant.config
    ), "–í—Ç–æ—Ä–æ–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ errors
    assert len(result_tolerant.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors"
    assert any(
        "missing type" in e.message for e in result_tolerant.errors
    ), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ missing type"
    assert any(
        "invalid port" in e.message for e in result_tolerant.errors
    ), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ invalid port"

    # –¢–µ—Å—Ç 2: Strict —Ä–µ–∂–∏–º - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ)
    context_strict = PipelineContext(mode="strict")
    result_strict = mgr.get_servers(context=context_strict, mode="strict")

    assert (
        result_strict.success
    ), "Strict —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –¥–∞–∂–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏"
    assert (
        len(result_strict.config) == 4
    ), f"Strict —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ 4 —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(result_strict.config)}"
    assert any(
        s.address == "1.2.3.4" for s in result_strict.config
    ), "–ü–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(
        s.address == "5.6.7.8" for s in result_strict.config
    ), "–í—Ç–æ—Ä–æ–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(
        s.address == "unknown-server-2" for s in result_strict.config
    ), "–ü–µ—Ä–≤—ã–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º)"
    assert any(
        s.address == "ss-server-3" for s in result_strict.config
    ), "–í—Ç–æ—Ä–æ–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ errors
    assert len(result_strict.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors"
    assert any(
        "missing type" in e.message for e in result_strict.errors
    ), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ missing type"
    assert any(
        "invalid port" in e.message for e in result_strict.errors
    ), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ invalid port"

    # –¢–µ—Å—Ç 3: Tolerant —Ä–µ–∂–∏–º —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    all_invalid_servers = [
        ParsedServer(
            type="",
            address="1.2.3.4",
            port=443,
            meta={
                "tag": "C",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="",
            port=443,
            meta={
                "tag": "D",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
        ParsedServer(
            type="ss",
            address="5.6.7.8",
            port=0,
            meta={
                "tag": "B",
                "method": "aes-256-gcm",
                "password": "test12345",
                "encryption": "aes-256-gcm",
            },
        ),
    ]

    class DummyParserInvalid:
        def parse(self, raw):
            return all_invalid_servers

    mgr_invalid = SubscriptionManager(
        src, detect_parser=lambda raw, t: DummyParserInvalid()
    )
    mgr_invalid.fetcher = DummyFetcher(src)
    from sboxmgr.subscription.manager.core import DataProcessor
    mgr_invalid.data_processor = DataProcessor(mgr_invalid.fetcher, mgr_invalid.error_handler)
    mgr_invalid.data_processor.parse_servers = lambda raw, context: (all_invalid_servers, True)

    result_invalid = mgr_invalid.get_servers(
        context=context_tolerant, mode="tolerant", force_reload=True
    )

    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ–ª–∏—Ç–∏–∫–∏
    assert (
        result_invalid.success
    ), "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã"
    assert (
        len(result_invalid.config) == 3
    ), "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 3 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"
    assert any(
        s.address == "unknown-server-0" for s in result_invalid.config
    ), "–ü–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
    assert any(
        s.address == "ss-server-1" for s in result_invalid.config
    ), "–í—Ç–æ—Ä–æ–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
    assert any(
        s.address == "ss-server-2" for s in result_invalid.config
    ), "–¢—Ä–µ—Ç–∏–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
    assert len(result_invalid.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors"


def test_ss_uri_query_fragment_order():
    """–¢–µ—Å—Ç: SS URI —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º # –∏ ? –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
    from sboxmgr.subscription.parsers.uri_list_parser import URIListParser

    parser = URIListParser()

    # –¢–µ—Å—Ç: SS URI —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º # –∏ ?
    test_uri = "ss://method:password@host:8388#tag2?plugin=obfs-local;obfs=tls"  # pragma: allowlist secret

    result = parser._parse_ss(test_uri)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω
    assert result.type == "ss"
    assert result.address == "host"
    assert result.port == 8388
    assert result.security == "method"
    # –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å padding —Å–∏–º–≤–æ–ª—ã –∏–∑ base64
    assert "password" in result.meta["password"]  # pragma: allowlist secret

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ fragment (tag) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω
    assert result.meta["tag"] == "tag2"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã
    assert result.meta["plugin"] == "obfs-local;obfs=tls"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    assert "error" not in result.meta
