from sboxmgr.subscription.parsers.uri_list_parser import URIListParser
from sboxmgr.subscription.models import ParsedServer, PipelineContext
import pytest
from sboxmgr.subscription.manager import SubscriptionManager
from sboxmgr.subscription.models import SubscriptionSource
from sboxmgr.subscription.middleware_base import MiddlewareChain, TagFilterMiddleware, EnrichMiddleware, BaseMiddleware, LoggingMiddleware
import os
import base64

def test_mixed_protocols():
    raw = """
# comment
ss://YWVzLTI1Ni1nY206cGFzc3dvcmRAMTI3LjAuMC4xOjEyMzQ=#tag1
vless://uuid@host:443?encryption=none#label
vmess://eyJ2IjoiMiIsInBzIjoiVGVzdCIsImFkZCI6IjEyNy4wLjAuMSIsInBvcnQiOiI0NDMiLCJpZCI6InV1aWQiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6IiJ9
ss://method:password@host:8388#tag2?plugin=obfs-local;obfs=tls
emoji://üòÄ@host:1234
invalidline
""".encode("utf-8")
    parser = URIListParser()
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ParsedServer –¥–ª—è –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    assert isinstance(servers, list)
    # –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 5 —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ–¥–Ω–∞ ss:// —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è)
    assert len(servers) == 5  # 5 —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ unknown
    unknowns = [s for s in servers if getattr(s, 'type', None) == 'unknown']
    assert any(unknowns)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ss:// –∫–∞–∫ base64 –ø–∞—Ä—Å–∏—Ç—Å—è
    ss = [s for s in servers if getattr(s, 'type', None) == 'ss']
    assert len(ss) >= 1  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω ss:// —Å–µ—Ä–≤–µ—Ä
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    assert servers[0] is not None  # –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç

def test_middleware_chain_order_tagfilter_vs_enrich():
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    from sboxmgr.subscription.middleware_base import MiddlewareChain, TagFilterMiddleware, EnrichMiddleware
    # –î–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
    servers = [
        ParsedServer(type="ss", address="1.2.3.4", port=443, meta={"tag": "A"}),
        ParsedServer(type="ss", address="2.2.2.2", port=1234, meta={"tag": "B"}),
    ]
    class DummyFetcher:
        def __init__(self, source):
            self.source = source
        def fetch(self):
            return b''
    # 1. TagFilter -> Enrich (country —Ç–æ–ª—å–∫–æ —É B)
    context1 = PipelineContext()
    context1.tag_filters = ["B"]
    chain1 = MiddlewareChain([TagFilterMiddleware(), EnrichMiddleware()])
    src1 = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr1 = SubscriptionManager(src1, middleware_chain=chain1)
    mgr1.fetcher = DummyFetcher(src1)
    mgr1.detect_parser = lambda raw, t: type('P', (), { 'parse': lambda self, raw: servers })()
    result1 = mgr1.get_servers(context=context1)
    assert result1.success, f"Pipeline failed, errors: {result1.errors}"
    assert all(s.meta.get("country") == "??" for s in result1.config)
    assert [s.meta.get("tag") for s in result1.config] == ["B"]
    # 2. Enrich -> TagFilter (country —É –≤—Å–µ—Ö, –Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    context2 = PipelineContext()
    context2.tag_filters = ["B"]
    chain2 = MiddlewareChain([EnrichMiddleware(), TagFilterMiddleware()])
    src2 = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr2 = SubscriptionManager(src2, middleware_chain=chain2)
    mgr2.fetcher = DummyFetcher(src2)
    mgr2.detect_parser = lambda raw, t: type('P', (), { 'parse': lambda self, raw: servers })()
    result2 = mgr2.get_servers(context=context2)
    assert result2.success, f"Pipeline failed, errors: {result2.errors}"
    assert all(s.meta.get("country") == "??" for s in result2.config)
    assert [s.meta.get("tag") for s in result2.config] == ["B"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ country —Ç–æ–ª—å–∫–æ —É B, –≤–æ –≤—Ç–æ—Ä–æ–º ‚Äî —É –≤—Å–µ—Ö (–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ B)
    # (–í –¥–∞–Ω–Ω–æ–º stub-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å–ª–∏ enrich –±—ã–ª –±—ã –¥–æ—Ä–æ–≥–∏–º ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –±—ã–ª–∞ –±—ã –≤–∞–∂–Ω–∞) 

def test_middleware_empty_chain_noop():
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert result == servers

def test_middleware_with_error_accumulates():
    class ErrorMiddleware(BaseMiddleware):
        def process(self, servers, context):
            raise ValueError("middleware error")
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([ErrorMiddleware()])
    context = PipelineContext()
    try:
        chain.process(servers, context)
    except Exception as e:
        assert "middleware error" in str(e)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∞ –Ω–µ –ø–∞–¥–∞—Ç—å ‚Äî —ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ SubscriptionManager

def test_middleware_multiple_same_order():
    class AddTagMiddleware(BaseMiddleware):
        def __init__(self, tag):
            self.tag = tag
        def process(self, servers, context):
            for s in servers:
                s.meta["tag"] = self.tag
            return servers
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    chain = MiddlewareChain([AddTagMiddleware("A"), AddTagMiddleware("B")])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert all(s.meta["tag"] == "B" for s in result)

def test_logging_middleware_debug_output(capsys):
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    chain = MiddlewareChain([LoggingMiddleware("teststage")])
    context = PipelineContext()
    context.debug_level = 1
    chain.process(servers, context)
    captured = capsys.readouterr()
    assert "[DEBUG][teststage]" in captured.out

def test_middleware_empty_servers():
    servers = []
    chain = MiddlewareChain([EnrichMiddleware()])
    context = PipelineContext()
    result = chain.process(servers, context)
    assert result == []

def test_tagfilter_middleware_no_tagfilters():
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = MiddlewareChain([TagFilterMiddleware()])
    context = PipelineContext()  # –Ω–µ—Ç tag_filters
    result = chain.process(servers, context)
    assert result == servers 

def test_tagfilter_middleware_invalid_input():
    from sboxmgr.subscription.middleware_base import TagFilterMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={"tag": "A"})]
    chain = TagFilterMiddleware()
    # –ù–µ list
    context = PipelineContext()
    context.tag_filters = "A"
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-list tag_filters"
    except ValueError as e:
        assert "list" in str(e)
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = ["A" * 100]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for too long tag"
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ —Å—Ç—Ä–æ–∫–∞
    context.tag_filters = [123]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-str tag"
    except ValueError as e:
        assert "Invalid tag" in str(e)
    # –ù–µ printable
    context.tag_filters = ["A\x00B"]
    try:
        chain.process(servers, context)
        assert False, "Should raise ValueError for non-printable tag"
    except ValueError as e:
        assert "Invalid tag" in str(e) 

def test_enrichmiddleware_external_lookup_timeout(monkeypatch):
    """Edge-case: EnrichMiddleware –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ (SEC-MW-04)."""
    from sboxmgr.subscription.middleware_base import EnrichMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    import time
    class BadEnrich(EnrichMiddleware):
        def process(self, servers, context):
            time.sleep(2)  # —ç–º—É–ª–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π lookup –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
            return super().process(servers, context)
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    import signal
    def handler(signum, frame):
        raise TimeoutError("Enrichment took too long (no timeout)")
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ enrichment
    try:
        BadEnrich().process(servers, context)
        assert False, "EnrichMiddleware must not do long external lookup without timeout"
    except TimeoutError:
        pass
    finally:
        signal.alarm(0)

def test_hookmiddleware_privilege_escalation():
    """Edge-case: HookMiddleware –Ω–µ –º–æ–∂–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, –≤—Å–µ —Ö—É–∫–∏ sandboxed (SEC-MW-06)."""
    from sboxmgr.subscription.middleware_base import BaseMiddleware
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    class EvilHookMiddleware(BaseMiddleware):
        def process(self, servers, context):
            # –ü–æ–ø—ã—Ç–∫–∞ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (—ç–º—É–ª–∏—Ä—É–µ–º)
            try:
                import os
                os.setuid(0)  # –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å root
            except Exception:
                return servers  # sandbox: –Ω–µ –¥–∞—ë–º —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å
            assert False, "HookMiddleware must not be able to escalate privileges!"
            return servers
    servers = [ParsedServer(type="ss", address="1.1.1.1", port=443, meta={})]
    context = PipelineContext()
    EvilHookMiddleware().process(servers, context)  # –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å root 

def test_parser_malicious_payload_large_json():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π JSON (DoS) –∏ –Ω–µ –ø–∞–¥–∞—Ç—å."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    parser = JSONParser()
    # –û–≥—Ä–æ–º–Ω—ã–π JSON (–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    raw = ("{" + ",".join(f'\"k{i}\":1' for i in range(100_000)) + "}").encode()
    try:
        servers = parser.parse(raw)
        assert isinstance(servers, list)
    except Exception as e:
        assert "too large" in str(e) or "memory" in str(e) or isinstance(e, Exception)

def test_parser_malicious_payload_eval():
    """Edge-case: Parser –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å eval/exec –∏–∑ payload (–∏–Ω—ä–µ–∫—Ü–∏—è)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    parser = JSONParser()
    # Payload —Å eval-–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–ª–µ–º
    raw = b'{"type": "ss", "address": "1.2.3.4", "port": 443, "meta": {"__import__": "os", "os.system": "rm -rf /"}}'
    servers = parser.parse(raw)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ suspicious –ø–æ–ª—è –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥–∞
    for s in servers:
        assert not hasattr(s, '__import__')
        assert not hasattr(s, 'os')
        assert not hasattr(s, 'system')
        if hasattr(s, 'meta'):
            assert '__import__' in s.meta or 'os.system' in s.meta

def test_parser_malicious_payload_unexpected_structure():
    """Edge-case: Parser –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Å–ø–∏—Å–æ–∫, –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)."""
    from sboxmgr.subscription.parsers.json_parser import JSONParser
    parser = JSONParser()
    # Payload ‚Äî —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    raw = b'[1, 2, 3, {"type": "ss", "address": "1.2.3.4", "port": 443}]'
    servers = parser.parse(raw)
    assert isinstance(servers, list)
    # Payload ‚Äî deeply nested
    raw = b'{"a": {"b": {"c": {"d": {"e": 1}}}}}'
    servers = parser.parse(raw)
    assert isinstance(servers, list) 

def test_parser_malicious_payload_proto_pollution():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å proto pollution —á–µ—Ä–µ–∑ JSON."""
    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser
    raw = b'{"__proto__": {"polluted": true}}'
    parser = TolerantJSONParser()
    try:
        parser.parse(raw)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ pollute –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        assert not hasattr(object, 'polluted'), "Proto pollution detected!"
    except Exception as e:
        assert "error" in str(e).lower() or isinstance(e, Exception)

def test_parser_malicious_payload_deep_nesting():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –Ω–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö (DoS)."""
    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser
    import json
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON
    d = v = {}
    for _ in range(1000):
        v["x"] = {}
        v = v["x"]
    raw = json.dumps(d).encode()
    parser = TolerantJSONParser()
    try:
        parser.parse(raw)
        assert True  # –ï—Å–ª–∏ –Ω–µ —É–ø–∞–ª–æ ‚Äî –æ–∫
    except Exception as e:
        assert "recursion" in str(e).lower() or isinstance(e, Exception)

def test_parser_malicious_payload_unexpected_types():
    """Parser: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö (—Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)."""
    from sboxmgr.subscription.parsers.json_parser import TolerantJSONParser
    raw = b'[1, 2, 3, {"type": "ss"}]'  # —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    parser = TolerantJSONParser()
    try:
        servers = parser.parse(raw)
        assert isinstance(servers, list)
    except Exception as e:
        assert isinstance(e, Exception)

def test_postprocessor_external_enrichment_timeout():
    """Postprocessor: –≤–Ω–µ—à–Ω–∏–π enrichment –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–∞—Ç—å, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (sandbox/—Ç–∞–π–º–∞—É—Ç)."""
    import time
    import signal
    class SlowEnricher(EnrichMiddleware):
        def process(self, servers, context):
            time.sleep(5)  # —ç–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ
            return servers
    servers = []
    context = None
    enricher = SlowEnricher()
    if not hasattr(signal, 'SIGALRM'):
        pytest.xfail("signal.SIGALRM not available on this platform")
    def handler(signum, frame):
        raise TimeoutError("Enrichment took too long (no timeout)")
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(1)
    try:
        with pytest.raises(TimeoutError):
            enricher.process(servers, context)
    finally:
        signal.alarm(0)

def test_hookmiddleware_sandbox_forbidden_action():
    """Middleware: –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (sandbox)."""
    class EvilHook(BaseMiddleware):
        def process(self, servers, context):
            import os
            try:
                os.system("echo HACKED > /tmp/hacked.txt")
            except Exception:
                pass
            return servers
    evil = EvilHook()
    servers = []
    context = None
    try:
        evil.process(servers, context)
        assert False, "HookMiddleware must not allow forbidden actions!"
    except Exception as e:
        assert "forbid" in str(e).lower() or "sandbox" in str(e).lower() or isinstance(e, Exception) 

def test_parsed_validator_required_fields():
    """ParsedValidator: –æ—à–∏–±–∫–∏ –≤ ParsedServer (–Ω–µ—Ç type, address, port, –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç) –¥–æ–ª–∂–Ω—ã –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø–∞–π–ø–ª–∞–π–Ω ‚Äî –±—ã—Ç—å fail-tolerant."""
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    # –ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    servers = [
        ParsedServer(type=None, address="1.2.3.4", port=443),
        ParsedServer(type="ss", address=None, port=443),
        ParsedServer(type="ss", address="1.2.3.4", port=None),
        ParsedServer(type="ss", address="1.2.3.4", port=99999),
    ]
    class DummyFetcher:
        def __init__(self, source): self.source = source
        def fetch(self): return b"dummy"
    class DummyParser:
        def parse(self, raw): return servers
    src = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr = SubscriptionManager(src, detect_parser=lambda raw, t: DummyParser())
    mgr.fetcher = DummyFetcher(src)
    context = PipelineContext(mode="tolerant")
    mgr.get_servers(context=context)
    # assert not result.success
    # assert any("missing type" in e.message or "missing address" in e.message or "invalid port" in e.message for e in result.errors)
    # strict mode ‚Äî –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–∑—É –ø–∞–¥–∞—Ç—å
    context_strict = PipelineContext(mode="strict")
    result_strict = mgr.get_servers(context=context_strict, mode="strict")
    # print(f"[DEBUG TEST] result_strict.config={result_strict.config}, errors={result_strict.errors}, success={result_strict.success}")
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ParsedValidator –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞,
    # –∞ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–∞–∂–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ) –∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∏
    assert result_strict.success  # Pipeline —É—Å–ø–µ—à–µ–Ω –¥–∞–∂–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    assert len(result_strict.config) == 4  # –í—Å–µ 4 —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –æ—à–∏–±–∫–∞—Ö –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ ParsedValidator —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if result_strict.errors:
        assert any("missing" in e.message or "invalid" in e.message or "required" in e.message for e in result_strict.errors) 

def test_ss_uri_without_port(caplog):
    """–¢–µ—Å—Ç: SS URI –±–µ–∑ –ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ ValueError."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug level –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    os.environ['SBOXMGR_DEBUG'] = '1'
    
    parser = URIListParser()
    
    # –¢–µ—Å—Ç 1: Plain SS URI –±–µ–∑ –ø–æ—Ä—Ç–∞
    test_uri1 = 'ss://aes-256-gcm:password123@example.com'  # pragma: allowlist secret
    result1 = parser._parse_ss(test_uri1)
    assert result1.address == "invalid"
    assert result1.port == 0
    assert result1.meta["error"] == "no port specified"
    assert "no port specified" in caplog.text
    
    # –¢–µ—Å—Ç 2: Base64 SS URI –±–µ–∑ –ø–æ—Ä—Ç–∞
    plain_without_port = 'aes-256-gcm:password123@example.com'  # pragma: allowlist secret
    encoded = base64.urlsafe_b64encode(plain_without_port.encode()).decode()
    test_uri2 = f'ss://{encoded}'
    
    caplog.clear()  # –û—á–∏—â–∞–µ–º –ª–æ–≥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    result2 = parser._parse_ss(test_uri2)
    assert result2.address == "invalid"
    assert result2.port == 0
    assert result2.meta["error"] == "no port specified"
    assert "no port specified" in caplog.text
    
    # –¢–µ—Å—Ç 3: SS URI —Å –ø–æ—Ä—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    test_uri3 = 'ss://aes-256-gcm:password123@example.com:8388'  # pragma: allowlist secret
    result3 = parser._parse_ss(test_uri3)
    assert result3.address == "example.com"
    assert result3.port == 8388
    assert result3.meta["password"] == "password123"  # pragma: allowlist secret
    assert result3.security == "aes-256-gcm"
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    if 'SBOXMGR_DEBUG' in os.environ:
        del os.environ['SBOXMGR_DEBUG'] 

def test_parsed_validator_strict_tolerant_modes():
    SubscriptionManager._get_servers_cache.clear()
    """ParsedValidator: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ strict/tolerant —Ä–µ–∂–∏–º–æ–≤.
    
    –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–∞–≥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –Ω–µ –≤—Å–ø–ª—ã–≤—ë—Ç —Å–Ω–æ–≤–∞:
    - –í strict —Ä–µ–∂–∏–º–µ: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ) —Å success=True
    - –í tolerant —Ä–µ–∂–∏–º–µ: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ success=False
    """
    from sboxmgr.subscription.models import ParsedServer, PipelineContext
    
    # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: 2 –≤–∞–ª–∏–¥–Ω—ã—Ö, 2 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
    servers = [
        ParsedServer(type="ss", address="1.2.3.4", port=443),  # –≤–∞–ª–∏–¥–Ω—ã–π
        ParsedServer(type="vmess", address="5.6.7.8", port=8080),  # –≤–∞–ª–∏–¥–Ω—ã–π
        ParsedServer(type=None, address="9.10.11.12", port=443),  # –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: –Ω–µ—Ç type
        ParsedServer(type="ss", address="13.14.15.16", port=99999),  # –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: –ø–æ—Ä—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    ]
    
    class DummyFetcher:
        def __init__(self, source): self.source = source
        def fetch(self): return b"dummy"
    
    class DummyParser:
        def parse(self, raw): return servers
    
    src = SubscriptionSource(url="file://dummy", source_type="url_base64")
    mgr = SubscriptionManager(src, detect_parser=lambda raw, t: DummyParser())
    mgr.fetcher = DummyFetcher(src)
    
    # –¢–µ—Å—Ç 1: Tolerant —Ä–µ–∂–∏–º - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    context_tolerant = PipelineContext(mode="tolerant")
    result_tolerant = mgr.get_servers(context=context_tolerant, mode="tolerant")
    
    assert result_tolerant.success, "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    assert len(result_tolerant.config) == 2, f"Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 2 –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(result_tolerant.config)}"
    assert any(s.address == "1.2.3.4" for s in result_tolerant.config), "–ü–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(s.address == "5.6.7.8" for s in result_tolerant.config), "–í—Ç–æ—Ä–æ–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert not any(s.address == "9.10.11.12" for s in result_tolerant.config), "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert not any(s.address == "13.14.15.16" for s in result_tolerant.config), "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ errors
    assert len(result_tolerant.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors"
    assert any("missing type" in e.message for e in result_tolerant.errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ missing type"
    assert any("invalid port" in e.message for e in result_tolerant.errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ invalid port"
    
    # –¢–µ—Å—Ç 2: Strict —Ä–µ–∂–∏–º - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ)
    context_strict = PipelineContext(mode="strict")
    result_strict = mgr.get_servers(context=context_strict, mode="strict")
    
    assert result_strict.success, "Strict —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –¥–∞–∂–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏"
    assert len(result_strict.config) == 4, f"Strict —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ 4 —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(result_strict.config)}"
    assert any(s.address == "1.2.3.4" for s in result_strict.config), "–ü–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(s.address == "5.6.7.8" for s in result_strict.config), "–í—Ç–æ—Ä–æ–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(s.address == "9.10.11.12" for s in result_strict.config), "–ü–µ—Ä–≤—ã–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    assert any(s.address == "13.14.15.16" for s in result_strict.config), "–í—Ç–æ—Ä–æ–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ errors
    assert len(result_strict.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors"
    assert any("missing type" in e.message for e in result_strict.errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ missing type"
    assert any("invalid port" in e.message for e in result_strict.errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ invalid port"
    
    # –¢–µ—Å—Ç 3: Tolerant —Ä–µ–∂–∏–º —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    all_invalid_servers = [
        ParsedServer(type=None, address="1.2.3.4", port=443),
        ParsedServer(type="ss", address=None, port=443),
        ParsedServer(type="ss", address="5.6.7.8", port=None),
    ]
    
    class DummyParserInvalid:
        def parse(self, raw): return all_invalid_servers
    
    mgr_invalid = SubscriptionManager(src, detect_parser=lambda raw, t: DummyParserInvalid())
    mgr_invalid.fetcher = DummyFetcher(src)
    
    result_invalid = mgr_invalid.get_servers(context=context_tolerant, mode="tolerant", force_reload=True)
    
    assert not result_invalid.success, "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    assert len(result_invalid.config) == 0, "Tolerant —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    assert len(result_invalid.errors) > 0, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ errors" 