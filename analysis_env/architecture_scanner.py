#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è sboxmgr
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç AST, networkx –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import ast
import json
import sys
from collections import defaultdict
from pathlib import Path
from typing import Dict, List

import networkx as nx


class ArchitecturalAnalyzer:
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""

    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.src_root = self.project_root / "src" / "sboxmgr"

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.classes = {}  # class_name -> {file, methods, bases, decorators}
        self.functions = {}  # func_name -> {file, calls, args}
        self.imports = defaultdict(set)  # file -> set of imports
        self.dependencies = nx.DiGraph()  # –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.interfaces = {}  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã/ABC
        self.decorators = defaultdict(list)  # decorator -> [classes/functions]
        self.singletons = []  # –∫–ª–∞—Å—Å—ã-—Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
        self.factories = []  # —Ñ–∞–±—Ä–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.di_patterns = []  # –ø–∞—Ç—Ç–µ—Ä–Ω—ã dependency injection

    def analyze(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üîç –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        python_files = list(self.src_root.rglob("*.py"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for py_file in python_files:
            try:
                self._analyze_file(py_file)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {py_file}: {e}")

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self._build_dependency_graph()

        # –ò—â–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._detect_patterns()

        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    def _analyze_file(self, file_path: Path):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ AST"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                tree = ast.parse(f.read(), filename=str(file_path))

            relative_path = file_path.relative_to(self.project_root)
            visitor = FileVisitor(str(relative_path), self)
            visitor.visit(tree)

        except Exception as e:
            print(f"üö® AST –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")

    def _build_dependency_graph(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        for file_path, imports in self.imports.items():
            for imported in imports:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ: file -> imported module
                self.dependencies.add_edge(file_path, imported, type="import")

    def _detect_patterns(self):
        """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        self._detect_singletons()
        self._detect_factories()
        self._detect_di_patterns()

    def _detect_singletons(self):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton"""
        for class_name, class_info in self.classes.items():
            methods = class_info.get("methods", [])
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
            has_instance = any("_instance" in method for method in methods)
            has_default = any("default" in method for method in methods)
            has_get_instance = any(
                "get_instance" in method or "getInstance" in method
                for method in methods
            )

            if has_instance or (has_default and has_get_instance):
                self.singletons.append(
                    {
                        "class": class_name,
                        "file": class_info["file"],
                        "confidence": "high" if has_instance else "medium",
                    }
                )

    def _detect_factories(self):
        """–ü–æ–∏—Å–∫ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        for class_name, class_info in self.classes.items():
            methods = class_info.get("methods", [])
            # –ò—â–µ–º —Ñ–∞–±—Ä–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            factory_methods = [
                m
                for m in methods
                if "create" in m.lower() or "build" in m.lower() or "make" in m.lower()
            ]

            if factory_methods:
                self.factories.append(
                    {
                        "class": class_name,
                        "file": class_info["file"],
                        "methods": factory_methods,
                    }
                )

    def _detect_di_patterns(self):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ Dependency Injection"""
        for class_name, class_info in self.classes.items():
            # –ò—â–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ç–∏–ø–∞–º–∏
            init_info = class_info.get("init_params", [])

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ DI: –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ç–∏–ø–∞–º–∏, Optional –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if len(init_info) > 2:  # –±–æ–ª—å—à–µ self –∏ –æ–¥–Ω–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ
                optional_params = [p for p in init_info if p.get("optional", False)]
                typed_params = [p for p in init_info if p.get("type_hint")]

                if optional_params or len(typed_params) > 1:
                    self.di_patterns.append(
                        {
                            "class": class_name,
                            "file": class_info["file"],
                            "injectable_params": len(init_info) - 1,  # –º–∏–Ω—É—Å self
                            "optional_params": len(optional_params),
                            "typed_params": len(typed_params),
                        }
                    )

    def get_orchestrator_candidates(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä–æ–ª—å Orchestrator"""
        candidates = []

        for class_name, class_info in self.classes.items():
            score = 0
            reasons = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (
                "manager" in class_name.lower()
                or "orchestrat" in class_name.lower()
                or "facade" in class_name.lower()
            ):
                score += 3
                reasons.append("–Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ä–æ–ª—å")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ (–º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ = —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–æ–ª—å?)
            method_count = len(class_info.get("methods", []))
            if method_count > 10:
                score += 2
                reasons.append(f"–º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ ({method_count})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DI –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            di_info = next(
                (di for di in self.di_patterns if di["class"] == class_name), None
            )
            if di_info:
                score += di_info["injectable_params"]
                reasons.append(f"DI –ø–∞—Ç—Ç–µ—Ä–Ω ({di_info['injectable_params']} –∏–Ω—ä–µ–∫—Ü–∏–π)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ export/build –º–µ—Ç–æ–¥–æ–≤
            methods = class_info.get("methods", [])
            export_methods = [
                m for m in methods if "export" in m.lower() or "build" in m.lower()
            ]
            if export_methods:
                score += len(export_methods)
                reasons.append(f"–º–µ—Ç–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞/—Å–±–æ—Ä–∫–∏: {export_methods}")

            if score >= 3:  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                candidates.append(
                    {
                        "class": class_name,
                        "file": class_info["file"],
                        "score": score,
                        "reasons": reasons,
                        "methods": methods,
                    }
                )

        return sorted(candidates, key=lambda x: x["score"], reverse=True)

    def get_missing_components(self, target_schema: Dict) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤–æ–π —Å—Ö–µ–º–æ–π"""
        missing = {"classes": [], "interfaces": [], "patterns": []}

        # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ö–µ–º—ã
        expected_components = [
            "Orchestrator",
            "SubscriptionMgr",
            "ExportedConfigBuilder",
            "OutboundManager",
            "InboundManager",
            "RouteManager",
            "SafetyGuard",
            "SingboxExporter",
            "ClashExporter",
            "XrayExporter",
            "UrlFetcher",
            "FileFetcher",
            "TagFilter",
            "EnrichGeo",
            "LatencyAnnotator",
        ]

        existing_classes = set(self.classes.keys())

        for expected in expected_components:
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if expected not in existing_classes:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                similar = [
                    cls
                    for cls in existing_classes
                    if expected.lower() in cls.lower()
                    or cls.lower() in expected.lower()
                ]
                if not similar:
                    missing["classes"].append(expected)

        return missing

    def generate_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        orchestrator_candidates = self.get_orchestrator_candidates()
        missing_components = self.get_missing_components({})

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
        module_stats = {}
        for file_path, imports in self.imports.items():
            module_name = Path(file_path).stem
            classes_in_module = [
                cls for cls, info in self.classes.items() if info["file"] == file_path
            ]

            module_stats[module_name] = {
                "file": file_path,
                "classes": len(classes_in_module),
                "imports": len(imports),
                "class_list": classes_in_module,
            }

        return {
            "summary": {
                "total_classes": len(self.classes),
                "total_functions": len(self.functions),
                "total_modules": len(self.imports),
                "singletons": len(self.singletons),
                "factories": len(self.factories),
                "di_patterns": len(self.di_patterns),
            },
            "orchestrator_candidates": orchestrator_candidates,
            "missing_components": missing_components,
            "singletons": self.singletons,
            "factories": self.factories,
            "di_patterns": self.di_patterns,
            "module_stats": module_stats,
            "top_classes_by_methods": sorted(
                [
                    (name, len(info.get("methods", [])))
                    for name, info in self.classes.items()
                ],
                key=lambda x: x[1],
                reverse=True,
            )[:10],
        }


class FileVisitor(ast.NodeVisitor):
    """AST visitor –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞"""

    def __init__(self, file_path: str, analyzer: ArchitecturalAnalyzer):
        self.file_path = file_path
        self.analyzer = analyzer
        self.current_class = None

    def visit_Import(self, node):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ import statements"""
        for alias in node.names:
            self.analyzer.imports[self.file_path].add(alias.name)
        self.generic_visit(node)

    def visit_ImportFrom(self, node):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ from X import Y statements"""
        if node.module:
            self.analyzer.imports[self.file_path].add(node.module)
            for alias in node.names:
                self.analyzer.imports[self.file_path].add(f"{node.module}.{alias.name}")
        self.generic_visit(node)

    def visit_ClassDef(self, node):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤"""
        class_name = node.name

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
        class_info = {
            "file": self.file_path,
            "methods": [],
            "bases": [self._get_name(base) for base in node.bases],
            "decorators": [
                self._get_decorator_name(dec) for dec in node.decorator_list
            ],
            "is_abstract": False,
            "init_params": [],
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ABC
        if any("ABC" in base for base in class_info["bases"]):
            class_info["is_abstract"] = True
            self.analyzer.interfaces[class_name] = class_info

        self.current_class = class_name

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                method_name = item.name
                class_info["methods"].append(method_name)

                # –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ __init__
                if method_name == "__init__":
                    class_info["init_params"] = self._analyze_function_args(item)

        self.analyzer.classes[class_name] = class_info

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
        for dec_name in class_info["decorators"]:
            self.analyzer.decorators[dec_name].append(("class", class_name))

        self.generic_visit(node)
        self.current_class = None

    def visit_FunctionDef(self, node):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π"""
        func_name = node.name

        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ visit_ClassDef
        if self.current_class:
            self.generic_visit(node)
            return

        # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        func_info = {
            "file": self.file_path,
            "args": self._analyze_function_args(node),
            "decorators": [
                self._get_decorator_name(dec) for dec in node.decorator_list
            ],
            "calls": [],
        }

        self.analyzer.functions[func_name] = func_info

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
        for dec_name in func_info["decorators"]:
            self.analyzer.decorators[dec_name].append(("function", func_name))

        self.generic_visit(node)

    def _get_name(self, node):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ AST node"""
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Attribute):
            return f"{self._get_name(node.value)}.{node.attr}"
        else:
            return str(node)

    def _get_decorator_name(self, node):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Call):
            return self._get_name(node.func)
        elif isinstance(node, ast.Attribute):
            return f"{self._get_name(node.value)}.{node.attr}"
        else:
            return str(node)

    def _analyze_function_args(self, node):
        """–ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        args_info = []

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in node.args.args:
            arg_info = {
                "name": arg.arg,
                "type_hint": self._get_name(arg.annotation) if arg.annotation else None,
                "optional": False,
            }
            args_info.append(arg_info)

        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        defaults_count = len(node.args.defaults)
        if defaults_count > 0:
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ optional
            for i in range(len(args_info) - defaults_count, len(args_info)):
                if i >= 0:
                    args_info[i]["optional"] = True

        return args_info


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    if len(sys.argv) < 2:
        print("Usage: python architecture_scanner.py <project_root>")
        sys.exit(1)

    project_root = sys.argv[1]

    analyzer = ArchitecturalAnalyzer(project_root)
    analyzer.analyze()

    report = analyzer.generate_report()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    output_file = (
        Path(project_root)
        / "plans"
        / "architecture_gap_analysis"
        / "ast_analysis_report.json"
    )
    output_file.parent.mkdir(parents=True, exist_ok=True)

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)

    print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")

    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\nüéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
    print(f"   –ö–ª–∞—Å—Å–æ–≤: {report['summary']['total_classes']}")
    print(f"   –§—É–Ω–∫—Ü–∏–π: {report['summary']['total_functions']}")
    print(f"   –ú–æ–¥—É–ª–µ–π: {report['summary']['total_modules']}")
    print(f"   –°–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤: {report['summary']['singletons']}")
    print(f"   –§–∞–±—Ä–∏–∫: {report['summary']['factories']}")
    print(f"   DI –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {report['summary']['di_patterns']}")

    print("\nüèÜ –¢–û–ü –ö–ê–ù–î–ò–î–ê–¢–û–í –ù–ê ORCHESTRATOR:")
    for i, candidate in enumerate(report["orchestrator_candidates"][:3], 1):
        print(f"   {i}. {candidate['class']} (score: {candidate['score']})")
        print(f"      üìÅ {candidate['file']}")
        print(f"      üîπ {', '.join(candidate['reasons'])}")

    print("\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    for missing in report["missing_components"]["classes"][:5]:
        print(f"   - {missing}")


if __name__ == "__main__":
    main()
