from typing import List, Dict, Any, Optional
from sboxmgr.subscription.models import ParsedServer, ClientProfile
from .routing.default_router import DefaultRouter
from sboxmgr.subscription.exporters.singbox_exporter import singbox_export

EXPORTER_REGISTRY = {
    "singbox": singbox_export,
    # –í –±—É–¥—É—â–µ–º: "clash": clash_export, "v2ray": v2ray_export –∏ —Ç.–¥.
}

class ExportManager:
    def __init__(self, routing_plugin=None, export_format="singbox", client_profile: 'Optional[ClientProfile]' = None):
        """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.

        Args:
            routing_plugin: –ü–ª–∞–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.
            export_format (str): –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (singbox, clash, v2ray –∏ –¥—Ä.).
            client_profile (Optional[ClientProfile]): –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–∏ inbounds.
        """
        self.routing_plugin = routing_plugin or DefaultRouter()
        self.export_format = export_format
        self.client_profile = client_profile

    def export(self, servers: List[ParsedServer], exclusions: List[str] = None, user_routes: List[Dict] = None, context: Dict[str, Any] = None, client_profile: 'Optional[ClientProfile]' = None, skip_version_check: bool = False) -> Dict:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.

        Args:
            servers (List[ParsedServer]): –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.
            exclusions (List[str], optional): –ò—Å–∫–ª—é—á–µ–Ω–∏—è.
            user_routes (List[Dict], optional): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã.
            context (Dict, optional): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
            client_profile (Optional[ClientProfile]): –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–µ—Ä—ë—Ç—Å—è –∏–∑ self).
            skip_version_check (bool): –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏.

        Returns:
            Dict: –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥.
        """
        exclusions = exclusions or []
        user_routes = user_routes or []
        context = context or {"mode": "default"}
        client_profile = client_profile or self.client_profile
        # 1. Filter servers by exclusions (assume s.address as unique id)
        filtered_servers = [s for s in servers if s.address not in exclusions]
        # 2. Generate routes
        routes = self.routing_plugin.generate_routes(filtered_servers, exclusions, user_routes, context)
        # 3. –î–µ–ª–µ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –Ω—É–∂–Ω–æ–º—É —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—É
        exporter = EXPORTER_REGISTRY.get(self.export_format)
        if not exporter:
            raise ValueError(f"Unknown export format: {self.export_format}")
        
        # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        if self.export_format == "singbox":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –¢–û–õ–¨–ö–û –¥–ª—è sing-box —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            singbox_version = None
            if not skip_version_check:
                from sboxmgr.utils.version import get_singbox_version, check_version_compatibility, get_version_warning_message
                import typer
                
                is_compatible, singbox_version, message = check_version_compatibility()
                if singbox_version:
                    if not is_compatible:
                        typer.echo(f"‚ö†Ô∏è  {get_version_warning_message(singbox_version)}", err=True)
                        typer.echo("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy outbounds", err=True)
                    typer.echo(f"üîß Detected sing-box version: {singbox_version}")
                else:
                    typer.echo("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é sing-box. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.", err=True)
            
            return exporter(filtered_servers, routes, client_profile=client_profile, singbox_version=singbox_version, skip_version_check=skip_version_check)
        else:
            return exporter(filtered_servers, routes)
    
    def export_to_singbox(self, servers: List[ParsedServer], routes: List[Dict] = None, client_profile: 'Optional[ClientProfile]' = None, singbox_version: Optional[str] = None) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ sing-box —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            servers (List[ParsedServer]): –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.
            routes (List[Dict], optional): –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.
            client_profile (Optional[ClientProfile]): –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.
            singbox_version (Optional[str]): –í–µ—Ä—Å–∏—è sing-box –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
            
        Returns:
            Dict: Sing-box –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.
        """
        routes = routes or []
        client_profile = client_profile or self.client_profile
        return singbox_export(servers, routes, client_profile=client_profile, singbox_version=singbox_version) 