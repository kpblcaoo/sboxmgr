{
  "project": {
    "name": "sing-box-config-manager",
    "description": "Manages sing-box proxy configurations with remote JSON fetching, protocol validation, and interactive installation.",
    "environment_variables": {
      "SINGBOX_LOG_FILE": "/var/log/update_singbox.log",
      "SINGBOX_CONFIG_FILE": "/etc/sing-box/config.json",
      "SINGBOX_BACKUP_FILE": "/etc/sing-box/config.json.bak",
      "SINGBOX_TEMPLATE_FILE": "./config.template.json",
      "SINGBOX_MAX_LOG_SIZE": "1048576",
      "SINGBOX_EXCLUSION_FILE": "./exclusions.json",
      "SINGBOX_SELECTED_CONFIG_FILE": "./selected_config.json",
      "SINGBOX_URL": "optional",
      "SINGBOX_REMARKS": "optional",
      "SINGBOX_INDEX": "optional",
      "SINGBOX_DEBUG": "0|1|2",
      "SINGBOX_PROXY": "optional"
    }
  },
  "modules": [
    {
      "file": "logging_setup.py",
      "functions": [
        {
          "name": "setup_logging",
          "inputs": ["debug_level:int", "log_file:str", "max_log_size:int"],
          "outputs": "None",
          "calls": ["rotate_logs"],
          "dependencies": ["logging", "logging.handlers", "os"],
          "files": ["log_file:/var/log/update_singbox.log"]
        },
        {
          "name": "rotate_logs",
          "inputs": ["log_file:str", "max_log_size:int"],
          "outputs": "None",
          "dependencies": ["os"],
          "files": ["log_file:/var/log/update_singbox.log"]
        }
      ]
    },
    {
      "file": "update_singbox.py",
      "functions": [
        {
          "name": "main",
          "inputs": ["CLI_args"],
          "outputs": "None",
          "calls": [
            "logging_setup:setup_logging",
            "config_fetch:fetch_json",
            "config_fetch:select_config",
            "protocol_validation:validate_protocol",
            "config_generate:generate_config",
            "service_manage:manage_service",
            "server_management:list_servers",
            "server_management:load_exclusions",
            "server_management:apply_exclusions",
            "server_management:exclude_servers",
            "server_management:remove_exclusions",
            "server_management:view_exclusions",
            "server_management:clear_exclusions",
            "server_management:load_selected_config",
            "server_management:save_selected_config",
            "server_management:generate_server_id"
          ],
          "dependencies": ["argparse", "json", "logging", "os", "sys"],
          "files": [
            "read:config.template.json",
            "read:exclusions.json",
            "read:selected_config.json",
            "write:/etc/sing-box/config.json",
            "write:/etc/sing-box/config.json.bak",
            "write:/var/log/update_singbox.log"
          ]
        },
        {
          "name": "generate_config_after_exclusion",
          "inputs": ["json_data:dict", "debug_level:int"],
          "outputs": "None",
          "calls": [
            "server_management:load_exclusions",
            "server_management:apply_exclusions",
            "server_management:generate_server_id",
            "protocol_validation:validate_protocol",
            "config_generate:generate_config"
          ],
          "dependencies": [],
          "files": [
            "read:exclusions.json",
            "write:/etc/sing-box/config.json",
            "write:/etc/sing-box/config.json.bak"
          ]
        }
      ]
    },
    {
      "file": "server_management.py",
      "functions": [
        {
          "name": "list_servers",
          "inputs": ["json_data:dict", "supported_protocols:set", "debug_level:int"],
          "outputs": "None",
          "dependencies": [],
          "files": []
        },
        {
          "name": "generate_server_id",
          "inputs": ["server:dict"],
          "outputs": "str",
          "dependencies": ["hashlib"],
          "files": []
        },
        {
          "name": "handle_temp_file",
          "inputs": ["content:dict", "target_path:str", "validate_fn:callable"],
          "outputs": "None",
          "dependencies": ["os", "tempfile", "shutil", "json"],
          "files": ["write:exclusions.json", "write:selected_config.json"]
        },
        {
          "name": "load_exclusions",
          "inputs": [],
          "outputs": "dict",
          "dependencies": ["os", "json"],
          "files": ["read:exclusions.json"]
        },
        {
          "name": "save_exclusions",
          "inputs": ["exclusions:dict"],
          "outputs": "None",
          "calls": ["handle_temp_file"],
          "dependencies": ["datetime"],
          "files": ["write:exclusions.json"]
        },
        {
          "name": "load_selected_config",
          "inputs": [],
          "outputs": "dict",
          "dependencies": ["os", "json"],
          "files": ["read:selected_config.json"]
        },
        {
          "name": "save_selected_config",
          "inputs": ["selected:dict"],
          "outputs": "None",
          "calls": ["handle_temp_file"],
          "dependencies": ["datetime"],
          "files": ["write:selected_config.json"]
        },
        {
          "name": "apply_exclusions",
          "inputs": ["configs:list", "excluded_ids:set", "debug_level:int"],
          "outputs": "list",
          "calls": ["generate_server_id"],
          "dependencies": [],
          "files": []
        },
        {
          "name": "exclude_servers",
          "inputs": ["json_data:dict", "exclude_list:list", "supported_protocols:set", "debug_level:int"],
          "outputs": "None",
          "calls": ["load_exclusions", "generate_server_id", "save_exclusions"],
          "dependencies": ["fnmatch"],
          "files": ["read:exclusions.json", "write:exclusions.json"]
        },
        {
          "name": "remove_exclusions",
          "inputs": ["exclude_list:list", "json_data:dict", "supported_protocols:set", "debug_level:int"],
          "outputs": "None",
          "calls": ["load_exclusions", "generate_server_id", "save_exclusions"],
          "dependencies": [],
          "files": ["read:exclusions.json", "write:exclusions.json"]
        },
        {
          "name": "view_exclusions",
          "inputs": ["debug_level:int"],
          "outputs": "None",
          "calls": ["load_exclusions"],
          "dependencies": ["json"],
          "files": ["read:exclusions.json"]
        },
        {
          "name": "clear_exclusions",
          "inputs": [],
          "outputs": "None",
          "dependencies": ["os"],
          "files": ["delete:exclusions.json"]
        }
      ]
    },
    {
      "file": "config_fetch.py",
      "functions": [
        {
          "name": "fetch_json",
          "inputs": ["url:str", "proxy_url:str|None"],
          "outputs": "dict|None",
          "dependencies": ["requests", "json", "logging"],
          "files": []
        },
        {
          "name": "select_config",
          "inputs": ["json_data:dict", "remarks:str|None", "index:int|None"],
          "outputs": "dict",
          "dependencies": [],
          "files": []
        }
      ]
    },
    {
      "file": "protocol_validation.py",
      "functions": [
        {
          "name": "validate_protocol",
          "inputs": ["config:dict", "supported_protocols:set"],
          "outputs": "dict",
          "dependencies": ["logging"],
          "files": []
        }
      ]
    },
    {
      "file": "config_generate.py",
      "functions": [
        {
          "name": "generate_config",
          "inputs": ["outbounds:list", "template_file:str", "config_file:str", "backup_file:str", "excluded_ips:list"],
          "outputs": "bool",
          "dependencies": ["os", "json", "subprocess", "logging"],
          "files": [
            "read:config.template.json",
            "read:/etc/sing-box/config.json",
            "write:/etc/sing-box/config.json",
            "write:/etc/sing-box/config.json.bak"
          ]
        }
      ]
    },
    {
      "file": "service_manage.py",
      "functions": [
        {
          "name": "manage_service",
          "inputs": [],
          "outputs": "None",
          "dependencies": ["shutil", "subprocess", "logging"],
          "files": []
        }
      ]
    },
    {
      "file": "module_installer.py",
      "functions": [
        {
          "name": "install_dependencies",
          "inputs": [],
          "outputs": "None",
          "dependencies": ["subprocess", "sys"],
          "files": ["read:requirements.txt"]
        }
      ]
    },
    {
      "file": "install_wizard.py",
      "functions": [
        {
          "name": "check_inquirer_version",
          "inputs": [],
          "outputs": "bool",
          "dependencies": ["importlib.metadata", "logging", "inquirer"],
          "files": []
        },
        {
          "name": "CustomRender.render_choice",
          "inputs": ["choice:str", "pointer:bool"],
          "outputs": "str",
          "calls": ["server_management:load_exclusions"],
          "dependencies": ["inquirer.render.console"],
          "files": ["read:exclusions.json"]
        },
        {
          "name": "create_dedicated_user",
          "inputs": ["username:str"],
          "outputs": "None",
          "dependencies": ["subprocess"],
          "files": ["write:/etc/sudoers.d/singbox"]
        },
        {
          "name": "set_directory_permissions",
          "inputs": ["username:str", "directories:list"],
          "outputs": "None",
          "dependencies": ["subprocess"],
          "files": []
        },
        {
          "name": "create_virtualenv",
          "inputs": ["path:str"],
          "outputs": "str",
          "dependencies": ["os", "subprocess", "sys"],
          "files": ["write:path/venv"]
        },
        {
          "name": "activate_virtualenv",
          "inputs": ["venv_path:str"],
          "outputs": "None",
          "dependencies": ["subprocess"],
          "files": []
        },
        {
          "name": "get_file_hash",
          "inputs": ["file_path:str"],
          "outputs": "str|None",
          "dependencies": ["hashlib", "os"],
          "files": ["read:file_path"]
        },
        {
          "name": "copy_files_to_installation_path",
          "inputs": ["source_files:list", "destination_path:str"],
          "outputs": "None",
          "calls": ["get_file_hash"],
          "dependencies": ["os", "shutil"],
          "files": [
            "read:update_singbox.py",
            "read:config.template.json",
            "read:logging_setup.py",
            "read:modules/*",
            "write:/opt/update_singbox/*"
          ]
        },
        {
          "name": "get_server_list",
          "inputs": ["url:str"],
          "outputs": "list",
          "dependencies": ["subprocess", "logging", "re"],
          "files": []
        },
        {
          "name": "get_server_list_with_exclusions",
          "inputs": ["url:str"],
          "outputs": "list",
          "calls": ["check_inquirer_version", "get_server_list", "server_management:load_exclusions"],
          "dependencies": [],
          "files": ["read:exclusions.json"]
        },
        {
          "name": "parse_arguments",
          "inputs": [],
          "outputs": "argparse.Namespace",
          "dependencies": ["argparse"],
          "files": []
        },
        {
          "name": "validate_url",
          "inputs": ["url:str"],
          "outputs": "bool",
          "dependencies": ["re"],
          "files": []
        },
        {
          "name": "ensure_install_path",
          "inputs": ["path:str"],
          "outputs": "None",
          "dependencies": ["os"],
          "files": ["write:path"]
        },
        {
          "name": "setup_systemd_service",
          "inputs": ["install_path:str", "timer_frequency:str", "service_verbosity:int", "install_link:str"],
          "outputs": "None",
          "dependencies": ["subprocess"],
          "files": [
            "write:/etc/systemd/system/update_singbox.service",
            "write:/etc/systemd/system/update_singbox.timer"
          ]
        },
        {
          "name": "run_installation_wizard",
          "inputs": [],
          "outputs": "None",
          "calls": [
            "parse_arguments",
            "validate_url",
            "get_server_list",
            "get_server_list_with_exclusions",
            "ensure_install_path",
            "copy_files_to_installation_path",
            "create_virtualenv",
            "activate_virtualenv",
            "setup_systemd_service",
            "server_management:view_exclusions"
          ],
          "dependencies": [
            "inquirer",
            "subprocess",
            "os",
            "sys",
            "logging",
            "hashlib",
            "shutil",
            "re"
          ],
          "files": [
            "read:update_singbox.py",
            "read:config.template.json",
            "read:logging_setup.py",
            "read:requirements.txt",
            "read:modules/*",
            "read:exclusions.json",
            "write:/opt/update_singbox/*",
            "write:/etc/systemd/system/update_singbox.service",
            "write:/etc/systemd/system/update_singbox.timer",
            "write:/etc/sudoers.d/singbox"
          ]
        }
      ]
    },
    {
      "file": "config.template.json",
      "type": "template",
      "structure": {
        "log": "logging_settings",
        "inbounds": ["tproxy", "socks"],
        "outbounds": ["urltest", "direct", "provider_outbounds"],
        "route": {"rules": ["$excluded_servers"], "rule_set": ["geoip-ru"]},
        "experimental": "cache_settings"
      },
      "used_by": ["config_generate:generate_config"]
    }
  ],
  "data_structures": {
    "json_data": "dict{outbounds:[server_configs]} | [server_configs]",
    "server_config": "dict{type:str, tag:str, server:str, server_port:int, ...}",
    "exclusions": "dict{last_modified:str, exclusions:[id:str, name:str, reason:str|None]}",
    "selected_config": "dict{last_modified:str, selected:[index:int, id:str]}",
    "outbounds": "list[dict{type:str, tag:str, server:str, server_port:int, ...}]"
  },
  "execution_flows": {
    "cli_update_singbox": [
      "parse_args",
      "logging_setup:setup_logging",
      "config_fetch:fetch_json",
      "server_management:handle_exclusions_selection",
      "protocol_validation:validate_protocol",
      "config_generate:generate_config",
      "service_manage:manage_service"
    ],
    "wizard_install_wizard": [
      "parse_arguments",
      "main_menu",
      "get_config:fetch_servers_and_apply",
      "install:copy_files_setup_systemd",
      "manage_exclusions:view_add_remove"
    ]
  }
}
