{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-18T21:20:33.110012Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 23,
      "functions_count": 56,
      "classes_count": 1,
      "call_edges_count": 199
    },
    "artifact_id": "197997f4-dd8c-4809-8537-fc00c6a8680c",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "6d1edbbc-e2eb-4784-92a5-d020eb0364ce",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index",
        "type": "directory",
        "artifact_id": "dec0f066-a7e6-43f0-aa02-82bea10e5e57",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/modules",
        "type": "directory",
        "artifact_id": "e610419b-eaf6-4f1b-80fb-17533b13861f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src",
        "type": "directory",
        "artifact_id": "2623d502-7d90-4333-becd-797b0a26d29f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/install",
        "type": "directory",
        "artifact_id": "71b30728-ed35-4412-8072-3d7a833550c3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/logging",
        "type": "directory",
        "artifact_id": "9833cd5e-d312-49bd-80d5-d92419af8a54",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/logsetup",
        "type": "directory",
        "artifact_id": "0408cddf-87c7-40c4-affe-3b4fc0deea8b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox",
        "type": "directory",
        "artifact_id": "091715c6-c6f5-422f-9240-f01dde959dbf",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/config",
        "type": "directory",
        "artifact_id": "bc73501a-828f-4e5d-a247-6200bf330e28",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/modules",
        "type": "directory",
        "artifact_id": "df1bed5d-c620-48d8-b751-0561a8a139da",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/server",
        "type": "directory",
        "artifact_id": "2b3ae753-29ab-4280-b961-8888b1d23e65",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/service",
        "type": "directory",
        "artifact_id": "4f646dcc-1eed-471e-b82b-08248638246d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/utils",
        "type": "directory",
        "artifact_id": "42508ef7-a673-47bc-8c06-71901bba58ab",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests",
        "type": "directory",
        "artifact_id": "c2d73a0b-5a8e-448a-a743-214e4cff79a4",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "90642801-5040-489f-baca-da4dbd672c42",
        "metadata": {}
      },
      {
        "path": "plans",
        "type": "directory",
        "artifact_id": "29cd874b-eb86-48f5-8e46-9c1eb99a1989",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "edb9a2eb-f47b-4892-bf52-13ae0ffa46f0",
        "metadata": {}
      },
      {
        "path": "src/__init__.py",
        "type": "file",
        "artifact_id": "1a9c5878-a24a-4aa5-9d49-c6ba4a0ffc14",
        "metadata": {}
      },
      {
        "path": "src/install",
        "type": "directory",
        "artifact_id": "d108be32-15cc-453a-aaae-003ac78b4ab9",
        "metadata": {}
      },
      {
        "path": "src/install/wizard.py",
        "type": "file",
        "artifact_id": "befd2741-eebf-4e67-a23f-635b957bb5ca",
        "metadata": {}
      },
      {
        "path": "src/logsetup",
        "type": "directory",
        "artifact_id": "807ee284-6e0b-4201-8923-5c6f759fa91f",
        "metadata": {}
      },
      {
        "path": "src/logsetup/__init__.py",
        "type": "file",
        "artifact_id": "d3997454-c1df-45f2-899b-8904b0aad835",
        "metadata": {}
      },
      {
        "path": "src/logsetup/setup.py",
        "type": "file",
        "artifact_id": "8d2efec3-5b88-47dd-bdd3-c0ea268a026f",
        "metadata": {}
      },
      {
        "path": "src/main.py",
        "type": "file",
        "artifact_id": "4a5a3ba4-00e2-4610-918d-59e572e54e11",
        "metadata": {}
      },
      {
        "path": "src/singbox",
        "type": "directory",
        "artifact_id": "3c60c735-1eba-42ff-ad27-0fe5d4c0e1d5",
        "metadata": {}
      },
      {
        "path": "src/singbox/config",
        "type": "directory",
        "artifact_id": "532eeb70-46e7-419f-ae0c-fb9cfce8e0fc",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/fetch.py",
        "type": "file",
        "artifact_id": "95b0f8a7-b6c7-4049-b180-9cd51bf30958",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/generate.py",
        "type": "file",
        "artifact_id": "d897c04f-192a-4eaf-a6f5-96295a924795",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/protocol.py",
        "type": "file",
        "artifact_id": "7b607668-6cb7-4c44-8374-234f4935d782",
        "metadata": {}
      },
      {
        "path": "src/singbox/modules",
        "type": "directory",
        "artifact_id": "7fe3097c-3959-4600-8b30-33aaeb13b54c",
        "metadata": {}
      },
      {
        "path": "src/singbox/modules/__init__.py",
        "type": "file",
        "artifact_id": "0d796882-7363-420d-ac98-cb214616bbb7",
        "metadata": {}
      },
      {
        "path": "src/singbox/server",
        "type": "directory",
        "artifact_id": "8118c54f-eafd-4092-9b79-b3a208a45bbf",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/exclusions.py",
        "type": "file",
        "artifact_id": "98b41a82-626b-477b-aae5-5689b1764353",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/management.py",
        "type": "file",
        "artifact_id": "4de7080a-2f7c-42b6-b9d3-bbf7d21dc20b",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/selection.py",
        "type": "file",
        "artifact_id": "7f8851b1-dcca-4331-a60e-caaf83383de3",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/state.py",
        "type": "file",
        "artifact_id": "14999e6c-fc77-4fcc-8494-1920ff063483",
        "metadata": {}
      },
      {
        "path": "src/singbox/service",
        "type": "directory",
        "artifact_id": "27a54ad9-4286-4aa7-a9d1-30f2bd3acc2f",
        "metadata": {}
      },
      {
        "path": "src/singbox/service/manage.py",
        "type": "file",
        "artifact_id": "8ac97268-00e1-46e5-bca1-f7d260368e2a",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils",
        "type": "directory",
        "artifact_id": "236f73ae-613e-4ad8-bd16-f536d683e58c",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/file.py",
        "type": "file",
        "artifact_id": "202df05b-613b-4c4b-b9e8-56de22b52dec",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/id.py",
        "type": "file",
        "artifact_id": "5a9666b8-68cd-46dc-9f61-46ec031812b0",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/module_installer.py",
        "type": "file",
        "artifact_id": "751ae18f-1db6-4ca2-98ea-9197011ed83b",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "bf28675b-5a49-4da9-90ab-a241b2de9552",
        "metadata": {}
      },
      {
        "path": "tests/conftest.py",
        "type": "file",
        "artifact_id": "2ce23a75-924b-41d5-9daf-6d27ae0766d0",
        "metadata": {}
      },
      {
        "path": "tests/test_cli_errors.py",
        "type": "file",
        "artifact_id": "c7f8ef51-c62e-4c62-872b-2fbda30ada7c",
        "metadata": {}
      },
      {
        "path": "tests/test_cli_exclusions.py",
        "type": "file",
        "artifact_id": "9dfc403f-3a21-4d11-8322-3be927bad3d5",
        "metadata": {}
      },
      {
        "path": "tests/test_cli_general.py",
        "type": "file",
        "artifact_id": "61f76b8b-e00c-4ba0-8ec1-bf72e6b11877",
        "metadata": {}
      },
      {
        "path": "tests/test_cli_list.py",
        "type": "file",
        "artifact_id": "4ab51109-df7a-40f1-b3ef-f60b34abbbab",
        "metadata": {}
      },
      {
        "path": "tests/test_cli_selection.py",
        "type": "file",
        "artifact_id": "361d3c74-b932-4f13-ac38-e21d5d431b7d",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "src.__init__",
      "path": "src/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5b059d9-4d6a-48c1-9c7d-53234f0d8c51"
    },
    {
      "module_id": "src.main",
      "path": "src/main.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Update sing-box configuration from a remote JSON source.",
      "artifact_id": "3f6f454c-df6e-495f-b69b-eeae761a6ed8"
    },
    {
      "module_id": "tests.test_cli_errors",
      "path": "tests/test_cli_errors.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9a10ab6c-77fc-4e87-aa5e-c8a28408b4d2"
    },
    {
      "module_id": "tests.test_cli_exclusions",
      "path": "tests/test_cli_exclusions.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "1540ae4b-913a-4385-b5a2-499306e25f8a"
    },
    {
      "module_id": "tests.test_cli_selection",
      "path": "tests/test_cli_selection.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9ba41473-0d25-43c6-a61b-27cf6d4b5d76"
    },
    {
      "module_id": "tests.conftest",
      "path": "tests/conftest.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e724a5ce-7e88-46e3-8950-2ca25a61924d"
    },
    {
      "module_id": "tests.test_cli_general",
      "path": "tests/test_cli_general.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d9383694-d607-44d1-a396-e3885b5cd265"
    },
    {
      "module_id": "tests.test_cli_list",
      "path": "tests/test_cli_list.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "eb9afc2d-c3ba-4320-8d89-021021f4e637"
    },
    {
      "module_id": "src.logsetup.__init__",
      "path": "src/logsetup/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2e7aa91f-e941-4d7e-9b6c-4e642c26ad5d"
    },
    {
      "module_id": "src.logsetup.setup",
      "path": "src/logsetup/setup.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ff26ce8c-3514-40f9-ab84-899b15ee9362"
    },
    {
      "module_id": "src.install.wizard",
      "path": "src/install/wizard.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Installation Wizard for Update Singbox",
      "artifact_id": "02eca3cb-53dd-43f1-850c-3e651b451848"
    },
    {
      "module_id": "src.singbox.service.manage",
      "path": "src/singbox/service/manage.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1e9cd91b-3baf-4d30-bcb6-23ac274ae989"
    },
    {
      "module_id": "src.singbox.config.generate",
      "path": "src/singbox/config/generate.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "6756c9b2-eb75-43c6-8541-8f3eda673e57"
    },
    {
      "module_id": "src.singbox.config.fetch",
      "path": "src/singbox/config/fetch.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0c3edad7-c262-43de-8d59-a0f96d3b3a5a"
    },
    {
      "module_id": "src.singbox.config.protocol",
      "path": "src/singbox/config/protocol.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a39820b6-8234-4e4b-98e8-952162fc5a96"
    },
    {
      "module_id": "src.singbox.server.selection",
      "path": "src/singbox/server/selection.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "f097cd8a-fb61-4c53-8250-95f3499a98cf"
    },
    {
      "module_id": "src.singbox.server.exclusions",
      "path": "src/singbox/server/exclusions.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "cd94625f-e8c4-46a9-9f73-a2a447d3990a"
    },
    {
      "module_id": "src.singbox.server.state",
      "path": "src/singbox/server/state.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5852fa05-9fcd-4bb3-af10-d29f26d43532"
    },
    {
      "module_id": "src.singbox.server.management",
      "path": "src/singbox/server/management.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "10a6b2b9-4e6c-46c9-9ba7-ae3ab3fce7fe"
    },
    {
      "module_id": "src.singbox.utils.file",
      "path": "src/singbox/utils/file.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "aac18a60-a0f3-4a72-ae7d-0f8923b638dc"
    },
    {
      "module_id": "src.singbox.utils.id",
      "path": "src/singbox/utils/id.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "23265acc-6826-4289-ba9e-bc8a99521ade"
    },
    {
      "module_id": "src.singbox.utils.module_installer",
      "path": "src/singbox/utils/module_installer.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ee85141f-c2cc-46b5-9bd3-2ee636607137"
    },
    {
      "module_id": "src.singbox.modules.__init__",
      "path": "src/singbox/modules/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "77fb963c-3da9-4160-ac8a-f996e4722fda"
    }
  ],
  "modules": [
    {
      "module_id": "src.__init__",
      "path": "src/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "e5b059d9-4d6a-48c1-9c7d-53234f0d8c51"
    },
    {
      "module_id": "src.main",
      "path": "src/main.py",
      "category": "core",
      "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function to update sing-box configuration.",
          "line_range": [
            57,
            293
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_config_after_exclusion",
          "docstring": "Generate configuration after applying exclusions.",
          "line_range": [
            295,
            332
          ],
          "parameters": [
            "json_data",
            "debug_level",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "parse_comma_separated_values",
          "docstring": "",
          "line_range": [
            59,
            60
          ],
          "parameters": [
            "value"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [],
        "parse_comma_separated_values": [
          "int",
          "v.strip",
          "value.split"
        ],
        "generate_config_after_exclusion": [
          "apply_exclusions",
          "outbounds.append",
          "chr",
          "outbound.get",
          "validate_protocol",
          "isinstance",
          "enumerate",
          "generate_config",
          "load_exclusions",
          "excluded_ips.append",
          "len",
          "logging.info",
          "logging.warning"
        ]
      },
      "dependencies": [
        "apply_exclusions",
        "argparse",
        "clear_exclusions",
        "dotenv",
        "exclude_servers",
        "fetch_json",
        "generate_config",
        "generate_server_id",
        "generate_temp_config",
        "json",
        "list_servers",
        "load_dotenv",
        "load_exclusions",
        "load_selected_config",
        "logging",
        "logsetup.setup",
        "manage_service",
        "os",
        "remove_exclusions",
        "save_exclusions",
        "save_selected_config",
        "select_config",
        "setup_logging",
        "singbox.config.fetch",
        "singbox.config.generate",
        "singbox.config.protocol",
        "singbox.server.exclusions",
        "singbox.server.management",
        "singbox.server.selection",
        "singbox.server.state",
        "singbox.service.manage",
        "singbox.utils.id",
        "subprocess",
        "sys",
        "tempfile",
        "validate_config_file",
        "validate_protocol",
        "view_exclusions"
      ],
      "hash": "9504bfa90e125b705d116d7a8d5169bea17871b86f1332ebeb8a1e0f14a6384b",
      "artifact_id": "3f6f454c-df6e-495f-b69b-eeae761a6ed8"
    },
    {
      "module_id": "tests.test_cli_errors",
      "path": "tests/test_cli_errors.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_invalid_url",
          "docstring": "",
          "line_range": [
            7,
            15
          ],
          "parameters": [
            "monkeypatch"
          ],
          "decorators": []
        },
        {
          "name": "test_invalid_index",
          "docstring": "",
          "line_range": [
            17,
            19
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_invalid_url": [
          "run_cli",
          "monkeypatch.delenv",
          "output.lower"
        ],
        "test_invalid_index": [
          "run_cli",
          "os.getenv"
        ]
      },
      "dependencies": [
        "conftest",
        "dotenv",
        "load_dotenv",
        "os",
        "run_cli"
      ],
      "hash": "e10285e67c22ddd82cacb88f26adf02d4f84403861c6b67efd8d624695373b78",
      "artifact_id": "9a10ab6c-77fc-4e87-aa5e-c8a28408b4d2"
    },
    {
      "module_id": "tests.test_cli_exclusions",
      "path": "tests/test_cli_exclusions.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_exclude_and_idempotent",
          "docstring": "",
          "line_range": [
            8,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_clear_exclusions",
          "docstring": "",
          "line_range": [
            19,
            23
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_broken_exclusions_json",
          "docstring": "",
          "line_range": [
            25,
            32
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_view_exclusions",
          "docstring": "",
          "line_range": [
            34,
            37
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_exclude_and_idempotent": [
          "open",
          "run_cli",
          "json.load",
          "len",
          "os.getenv"
        ],
        "test_clear_exclusions": [
          "run_cli",
          "os.getenv"
        ],
        "test_broken_exclusions_json": [
          "open",
          "run_cli",
          "json.load",
          "f.write",
          "len",
          "os.getenv"
        ],
        "test_view_exclusions": [
          "run_cli",
          "os.getenv"
        ]
      },
      "dependencies": [
        "conftest",
        "dotenv",
        "json",
        "load_dotenv",
        "os",
        "run_cli"
      ],
      "hash": "d59c0570bbbc4c9cce39383d048a94286f365b684c53ca61c570ae3bbd76744b",
      "artifact_id": "1540ae4b-913a-4385-b5a2-499306e25f8a"
    },
    {
      "module_id": "tests.test_cli_selection",
      "path": "tests/test_cli_selection.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_excluded_index",
          "docstring": "",
          "line_range": [
            7,
            10
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_excluded_remarks",
          "docstring": "",
          "line_range": [
            12,
            15
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_excluded_index": [
          "run_cli",
          "os.getenv"
        ],
        "test_excluded_remarks": [
          "run_cli",
          "os.getenv"
        ]
      },
      "dependencies": [
        "conftest",
        "dotenv",
        "json",
        "load_dotenv",
        "os",
        "run_cli"
      ],
      "hash": "6d926b4fce52f2f8ad1d403a2e640d6398d1f7a742c0e2cad813a1f779760475",
      "artifact_id": "9ba41473-0d25-43c6-a61b-27cf6d4b5d76"
    },
    {
      "module_id": "tests.conftest",
      "path": "tests/conftest.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "run_cli",
          "docstring": "\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 CLI \u0441 capture_output.\nexclusions.json \u0438 selected_config.json \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0432 cwd (tmp_path) \u0447\u0435\u0440\u0435\u0437 env.",
          "line_range": [
            10,
            24
          ],
          "parameters": [
            "args",
            "env",
            "cwd"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_files",
          "docstring": "\u0424\u0438\u043a\u0441\u0442\u0443\u0440\u0430: \u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u0432\u043e\u0451\u043c tmp_path, \u0444\u0430\u0439\u043b\u044b \u043e\u0447\u0438\u0449\u0430\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.",
          "line_range": [
            27,
            37
          ],
          "parameters": [
            "tmp_path",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.fixture(autouse=True)"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "run_cli": [
          "Path",
          "subprocess.run",
          "str",
          "os.getcwd"
        ],
        "cleanup_files": [
          "monkeypatch.chdir",
          "os.remove",
          "pytest.fixture"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "pytest",
        "shutil",
        "subprocess",
        "sys"
      ],
      "hash": "c955cad400b081a77ecedc41b6f65f65f687d778bb2c2e03c0532daaa9c020ef",
      "artifact_id": "e724a5ce-7e88-46e3-8950-2ca25a61924d"
    },
    {
      "module_id": "tests.test_cli_general",
      "path": "tests/test_cli_general.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_dry_run_no_selected_config",
          "docstring": "",
          "line_range": [
            8,
            10
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_normal_run_creates_selected_config",
          "docstring": "",
          "line_range": [
            12,
            17
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_dry_run_no_selected_config": [
          "run_cli",
          "os.getenv"
        ],
        "test_normal_run_creates_selected_config": [
          "json.load",
          "open",
          "run_cli",
          "os.getenv"
        ]
      },
      "dependencies": [
        "conftest",
        "dotenv",
        "json",
        "load_dotenv",
        "os",
        "run_cli"
      ],
      "hash": "e226194bff5a5d2b0466646bb03e3898c5343285179b1b85a663f9037d08f559",
      "artifact_id": "d9383694-d607-44d1-a396-e3885b5cd265"
    },
    {
      "module_id": "tests.test_cli_list",
      "path": "tests/test_cli_list.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_list_servers_excluded",
          "docstring": "",
          "line_range": [
            7,
            10
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_list_servers_excluded": [
          "run_cli",
          "os.getenv"
        ]
      },
      "dependencies": [
        "conftest",
        "dotenv",
        "json",
        "load_dotenv",
        "os",
        "run_cli"
      ],
      "hash": "4c1baaeadc4a1cbdbb9af68c011c9aae14dc8075e549fd88a892d79575bae1f1",
      "artifact_id": "eb9afc2d-c3ba-4320-8d89-021021f4e637"
    },
    {
      "module_id": "src.logsetup.__init__",
      "path": "src/logsetup/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "2e7aa91f-e941-4d7e-9b6c-4e642c26ad5d"
    },
    {
      "module_id": "src.logsetup.setup",
      "path": "src/logsetup/setup.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_logging",
          "docstring": "Configure logging with file and syslog handlers.",
          "line_range": [
            5,
            27
          ],
          "parameters": [
            "debug_level",
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        },
        {
          "name": "rotate_logs",
          "docstring": "Rotate log file if it exceeds max_log_size.",
          "line_range": [
            29,
            41
          ],
          "parameters": [
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_logging": [
          "file_handler.setFormatter",
          "logging.warning",
          "syslog_handler.setFormatter",
          "logger.setLevel",
          "rotate_logs",
          "logging.Formatter",
          "logging.FileHandler",
          "logger.addHandler",
          "logging.getLogger"
        ],
        "rotate_logs": [
          "range",
          "open",
          "os.rename"
        ]
      },
      "dependencies": [
        "logging",
        "logging.handlers",
        "os"
      ],
      "hash": "8e9da24732a22dc62cbdc7f05b51625a8831cdf455cbad682751a260fd42f5fe",
      "artifact_id": "ff26ce8c-3514-40f9-ab84-899b15ee9362"
    },
    {
      "module_id": "src.install.wizard",
      "path": "src/install/wizard.py",
      "category": "core",
      "module_doc": "Installation Wizard for Update Singbox\n\nDev-mode: set WIZARD_DEV=1 to prevent any real changes to the system (no file writes, no systemd, no chmod, only logging actions).",
      "functions": [
        {
          "name": "check_inquirer_version",
          "docstring": "Check if python-inquirer is installed and log its version.",
          "line_range": [
            24,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_dedicated_user",
          "docstring": "",
          "line_range": [
            50,
            62
          ],
          "parameters": [
            "username"
          ],
          "decorators": []
        },
        {
          "name": "set_directory_permissions",
          "docstring": "",
          "line_range": [
            64,
            67
          ],
          "parameters": [
            "username",
            "directories"
          ],
          "decorators": []
        },
        {
          "name": "create_virtualenv",
          "docstring": "",
          "line_range": [
            69,
            76
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "activate_virtualenv",
          "docstring": "",
          "line_range": [
            78,
            81
          ],
          "parameters": [
            "venv_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "Compute SHA-256 hash of a file.",
          "line_range": [
            83,
            91
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_files_to_installation_path",
          "docstring": "Copy files to destination, overwriting if contents differ.",
          "line_range": [
            93,
            125
          ],
          "parameters": [
            "source_files",
            "destination_path"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list",
          "docstring": "Fetch server list using update_singbox.py -l.",
          "line_range": [
            127,
            158
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list_with_exclusions",
          "docstring": "Fetch server list and mark exclusions.",
          "line_range": [
            160,
            171
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "parse_arguments",
          "docstring": "",
          "line_range": [
            173,
            180
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "validate_url",
          "docstring": "",
          "line_range": [
            182,
            191
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "ensure_install_path",
          "docstring": "",
          "line_range": [
            193,
            198
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "setup_systemd_service",
          "docstring": "",
          "line_range": [
            200,
            242
          ],
          "parameters": [
            "install_path",
            "timer_frequency",
            "service_verbosity",
            "install_link"
          ],
          "decorators": []
        },
        {
          "name": "run_installation_wizard",
          "docstring": "",
          "line_range": [
            244,
            407
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "render_choice",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "parameters": [
            "self",
            "choice",
            "pointer"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CustomRender",
          "docstring": "Custom renderer to visually distinguish excluded servers.",
          "line_range": [
            41,
            48
          ],
          "methods": [
            {
              "name": "render_choice",
              "docstring": "",
              "line_range": [
                43,
                48
              ],
              "parameters": [
                "self",
                "choice",
                "pointer"
              ]
            }
          ],
          "bases": [
            "ConsoleRender"
          ]
        }
      ],
      "callgraph": {
        "check_inquirer_version": [
          "logging.error",
          "print",
          "logging.warning",
          "logging.info"
        ],
        "render_choice": [
          "load_exclusions"
        ],
        "create_dedicated_user": [
          "sudoers_file.write",
          "open",
          "print",
          "subprocess.run"
        ],
        "set_directory_permissions": [
          "print",
          "subprocess.run"
        ],
        "create_virtualenv": [
          "print",
          "subprocess.run"
        ],
        "activate_virtualenv": [
          "subprocess.run"
        ],
        "get_file_hash": [
          "open",
          "f.read",
          "sha256.hexdigest",
          "sha256.update",
          "hashlib.sha256",
          "iter"
        ],
        "copy_files_to_installation_path": [
          "safe_copy",
          "os.makedirs",
          "print",
          "os.walk",
          "safe_copytree",
          "get_file_hash"
        ],
        "get_server_list": [
          "line.split",
          "subprocess.run",
          "set",
          "re.sub",
          "seen_names.add",
          "print",
          "logging.info",
          "logging.error",
          "len",
          "logging.warning",
          "server_list.append"
        ],
        "get_server_list_with_exclusions": [
          "get_server_list",
          "load_exclusions",
          "check_inquirer_version"
        ],
        "parse_arguments": [
          "range",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "os.getenv",
          "parser.add_argument"
        ],
        "validate_url": [
          "re.match",
          "re.compile"
        ],
        "ensure_install_path": [
          "print",
          "safe_makedirs"
        ],
        "setup_systemd_service": [
          "safe_write",
          "print",
          "safe_run"
        ],
        "run_installation_wizard": [
          "CustomRender",
          "inquirer.Checkbox",
          "ensure_install_path",
          "setup_systemd_service",
          "re.sub",
          "map",
          "print",
          "logging.info",
          "activate_virtualenv",
          "parse_arguments",
          "validate_url",
          "inquirer.Text",
          "selected_indices.append",
          "create_virtualenv",
          "copy_files_to_installation_path",
          "inquirer.prompt",
          "get_server_list",
          "view_exclusions",
          "logging.error",
          "get_server_list_with_exclusions",
          "inquirer.List",
          "safe_run",
          "all_servers.index"
        ]
      },
      "dependencies": [
        "ConsoleRender",
        "argparse",
        "dotenv",
        "hashlib",
        "importlib.metadata",
        "inquirer",
        "inquirer.render.console",
        "load_dotenv",
        "load_exclusions",
        "logging",
        "os",
        "re",
        "shutil",
        "singbox.server.exclusions",
        "subprocess",
        "sys",
        "view_exclusions"
      ],
      "hash": "f469ced4bc5be565bdb02cb804f5ff2571cadbd6e30f877c38cebda66fa1d212",
      "artifact_id": "02eca3cb-53dd-43f1-850c-3e651b451848"
    },
    {
      "module_id": "src.singbox.service.manage",
      "path": "src/singbox/service/manage.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "manage_service",
          "docstring": "Restart or start sing-box service.",
          "line_range": [
            5,
            17
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "manage_service": [
          "subprocess.run",
          "info",
          "shutil.which",
          "EnvironmentError",
          "error"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "logging",
        "shutil",
        "subprocess"
      ],
      "hash": "61ba558fa807efd84f9d47c333da283ee45bc6578ad36fb7e1cb1e6b21f64217",
      "artifact_id": "1e9cd91b-3baf-4d30-bcb6-23ac274ae989"
    },
    {
      "module_id": "src.singbox.config.generate",
      "path": "src/singbox/config/generate.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_config",
          "docstring": "Generate sing-box configuration from template.",
          "line_range": [
            6,
            77
          ],
          "parameters": [
            "outbounds",
            "template_file",
            "config_file",
            "backup_file",
            "excluded_ips"
          ],
          "decorators": []
        },
        {
          "name": "generate_temp_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 json-\u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0430 \u0434\u043b\u044f dry-run \u0431\u0435\u0437 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b.",
          "line_range": [
            79,
            104
          ],
          "parameters": [
            "outbounds",
            "template_file",
            "excluded_ips"
          ],
          "decorators": []
        },
        {
          "name": "validate_config_file",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433-\u0444\u0430\u0439\u043b \u0447\u0435\u0440\u0435\u0437 sing-box check. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 (bool, \u0432\u044b\u0432\u043e\u0434).",
          "line_range": [
            106,
            113
          ],
          "parameters": [
            "config_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_config": [
          "config.strip",
          "open",
          "rule.get",
          "subprocess.run",
          "info",
          "outbound.get",
          "o.get",
          "current_config_file.read",
          "next",
          "json.load",
          "enumerate",
          "json.dumps",
          "f.write",
          "current_config.strip",
          "len",
          "error",
          "os.rename",
          "FileNotFoundError"
        ],
        "generate_temp_config": [
          "open",
          "rule.get",
          "outbound.get",
          "o.get",
          "next",
          "json.load",
          "enumerate",
          "json.dumps",
          "error",
          "FileNotFoundError"
        ],
        "validate_config_file": [
          "subprocess.run"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "json",
        "logging",
        "os",
        "subprocess"
      ],
      "hash": "e168327a06bf5095e20b516e110ea119bbc233502f685092d3714d721277fd59",
      "artifact_id": "6756c9b2-eb75-43c6-8541-8f3eda673e57"
    },
    {
      "module_id": "src.singbox.config.fetch",
      "path": "src/singbox/config/fetch.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "fetch_json",
          "docstring": "Fetch JSON from URL with optional proxy.",
          "line_range": [
            7,
            32
          ],
          "parameters": [
            "url",
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "select_config",
          "docstring": "Select proxy configuration by remarks or index.",
          "line_range": [
            34,
            64
          ],
          "parameters": [
            "json_data",
            "remarks",
            "index",
            "dry_run"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fetch_json": [
          "requests.get",
          "response.json",
          "error",
          "response.raise_for_status"
        ],
        "select_config": [
          "item.get",
          "outbound.get",
          "ValueError",
          "isinstance",
          "load_exclusions",
          "generate_server_id"
        ]
      },
      "dependencies": [
        "error",
        "generate_server_id",
        "json",
        "load_exclusions",
        "logging",
        "requests",
        "singbox.server.exclusions",
        "singbox.utils.id"
      ],
      "hash": "89293702bbccab7391691f86f9e781b8eadfdb0feee07ef8312e3be96c8350a1",
      "artifact_id": "0c3edad7-c262-43de-8d59-a0f96d3b3a5a"
    },
    {
      "module_id": "src.singbox.config.protocol",
      "path": "src/singbox/config/protocol.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_protocol",
          "docstring": "Validate protocol and extract parameters.",
          "line_range": [
            3,
            88
          ],
          "parameters": [
            "config",
            "supported_protocols"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_protocol": [
          "config.get",
          "ValueError",
          "outbound.get",
          "error",
          "outbound.update"
        ]
      },
      "dependencies": [
        "error",
        "logging",
        "warning"
      ],
      "hash": "e09902feb50c53274e545ea215dc1e76a29dffba56756398efb849569a6886a8",
      "artifact_id": "a39820b6-8234-4e4b-98e8-952162fc5a96"
    },
    {
      "module_id": "src.singbox.server.selection",
      "path": "src/singbox/server/selection.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.\nExcluded servers \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a (excluded), \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0441\u043a\u0432\u043e\u0437\u043d\u0430\u044f.",
          "line_range": [
            4,
            29
          ],
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level",
            "dry_run"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "server.get",
          "isinstance",
          "enumerate",
          "print",
          "load_exclusions",
          "generate_server_id"
        ]
      },
      "dependencies": [
        "generate_server_id",
        "load_exclusions",
        "singbox.server.exclusions",
        "singbox.utils.id"
      ],
      "hash": "b2509c13c42d6913b81df29c373f4e6a55ae9da9ebaa1b453ea71e194ddbbb4f",
      "artifact_id": "f097cd8a-fb61-4c53-8250-95f3499a98cf"
    },
    {
      "module_id": "src.singbox.server.exclusions",
      "path": "src/singbox/server/exclusions.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_exclusions",
          "docstring": "Load exclusions from the exclusion file.",
          "line_range": [
            8,
            20
          ],
          "parameters": [
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "save_exclusions",
          "docstring": "Save exclusions to the exclusion file.",
          "line_range": [
            22,
            27
          ],
          "parameters": [
            "exclusions"
          ],
          "decorators": []
        },
        {
          "name": "exclude_servers",
          "docstring": "Exclude servers by index or name, supporting wildcards.",
          "line_range": [
            29,
            68
          ],
          "parameters": [
            "json_data",
            "exclude_list",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "remove_exclusions",
          "docstring": "Remove exclusions by index or name.",
          "line_range": [
            70,
            89
          ],
          "parameters": [
            "exclude_list",
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "view_exclusions",
          "docstring": "View current exclusions.",
          "line_range": [
            91,
            98
          ],
          "parameters": [
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "clear_exclusions",
          "docstring": "Clear all current exclusions.",
          "line_range": [
            100,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_exclusions": [
          "open",
          "json.load",
          "print",
          "logging.error",
          "os.getenv"
        ],
        "save_exclusions": [
          "open",
          "json.dump",
          "os.getenv"
        ],
        "exclude_servers": [
          "server.get",
          "fnmatch.fnmatch",
          "existing_ids.add",
          "item.isdigit",
          "enumerate",
          "len",
          "print",
          "load_exclusions",
          "new_exclusions.append",
          "generate_server_id",
          "int",
          "json_data.get",
          "save_exclusions"
        ],
        "remove_exclusions": [
          "server.get",
          "enumerate",
          "item.startswith",
          "len",
          "print",
          "load_exclusions",
          "int",
          "json_data.get",
          "save_exclusions"
        ],
        "view_exclusions": [
          "exclusion.get",
          "json.dumps",
          "print",
          "load_exclusions"
        ],
        "clear_exclusions": [
          "os.getenv",
          "print",
          "os.remove"
        ]
      },
      "dependencies": [
        "datetime",
        "fnmatch",
        "generate_server_id",
        "json",
        "logging",
        "os",
        "singbox.utils.id"
      ],
      "hash": "b43b865fd81115e35f832774f20c97f4b133b0bb81404fce50a0684240736f3b",
      "artifact_id": "cd94625f-e8c4-46a9-9f73-a2a447d3990a"
    },
    {
      "module_id": "src.singbox.server.state",
      "path": "src/singbox/server/state.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": [
            5,
            11
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "Save selected configuration to file.",
          "line_range": [
            13,
            18
          ],
          "parameters": [
            "selected"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_selected_config": [
          "json.load",
          "open",
          "os.getenv"
        ],
        "save_selected_config": [
          "open",
          "json.dump",
          "os.getenv"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": "3c05410db1a7b992040ea50c1f185845719a6ef5c66a9eec208aa332fc5a7ad5",
      "artifact_id": "5852fa05-9fcd-4bb3-af10-d29f26d43532"
    },
    {
      "module_id": "src.singbox.server.management",
      "path": "src/singbox/server/management.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.",
          "line_range": [
            11,
            30
          ],
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": [
            33,
            38
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "selected"
          ],
          "decorators": []
        },
        {
          "name": "apply_exclusions",
          "docstring": "Apply exclusions to the list of server configurations.",
          "line_range": [
            46,
            56
          ],
          "parameters": [
            "configs",
            "excluded_ids",
            "debug_level"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "isinstance",
          "server.get",
          "print"
        ],
        "load_selected_config": [
          "json.load",
          "open"
        ],
        "save_selected_config": [
          "atomic_handle_temp_file"
        ],
        "apply_exclusions": [
          "config.get",
          "valid_configs.append",
          "enumerate",
          "print",
          "generate_server_id"
        ]
      },
      "dependencies": [
        "datetime",
        "generate_server_id",
        "handle_temp_file",
        "json",
        "os",
        "singbox.utils.file",
        "singbox.utils.id",
        "sys"
      ],
      "hash": "256a305b84a050ad0c0384788704396b9a3d1edf29879ef314cabac367c6fde2",
      "artifact_id": "10a6b2b9-4e6c-46c9-9ba7-ae3ab3fce7fe"
    },
    {
      "module_id": "src.singbox.utils.file",
      "path": "src/singbox/utils/file.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "handle_temp_file",
          "docstring": "Write content to a temporary file, validate, and move to target path.",
          "line_range": [
            7,
            20
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "handle_temp_file": [
          "open",
          "tempfile.gettempdir",
          "ValueError",
          "json.dumps",
          "f.write",
          "validate_fn",
          "shutil.move",
          "error"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": "8f415c612ff475b6360500db31b6c41c5cd481824d255df51d2b08223d5a211d",
      "artifact_id": "aac18a60-a0f3-4a72-ae7d-0f8923b638dc"
    },
    {
      "module_id": "src.singbox.utils.id",
      "path": "src/singbox/utils/id.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_server_id",
          "docstring": "Generate a unique ID for a server based on tag, protocol, and port.",
          "line_range": [
            3,
            6
          ],
          "parameters": [
            "server"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_server_id": [
          "server.get",
          "hashlib.sha256",
          "identifier.encode"
        ]
      },
      "dependencies": [
        "hashlib"
      ],
      "hash": "9c7f1c2da7bd5c2592c8ec2ad41cc8b326a5d5a3b5a747d95148e75fcedb11c6",
      "artifact_id": "23265acc-6826-4289-ba9e-bc8a99521ade"
    },
    {
      "module_id": "src.singbox.utils.module_installer",
      "path": "src/singbox/utils/module_installer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "install_dependencies",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_dependencies": [
          "print",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys"
      ],
      "hash": "85f0a2ced8f559a0da8d521a551fd94c629660b89b8398f51bda616c2cf0b0bd",
      "artifact_id": "ee85141f-c2cc-46b5-9bd3-2ee636607137"
    },
    {
      "module_id": "src.singbox.modules.__init__",
      "path": "src/singbox/modules/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "77fb963c-3da9-4160-ac8a-f996e4722fda"
    }
  ]
}