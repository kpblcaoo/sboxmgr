{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-17T17:36:12.029816Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 16,
      "functions_count": 51,
      "classes_count": 1,
      "call_edges_count": 188
    },
    "artifact_id": "1140bf30-1e29-43ae-96f5-d6bedc6596fd",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "12f05b06-d9d8-46f7-96a1-27e3dd779447",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index",
        "type": "directory",
        "artifact_id": "9f59dfee-739c-425a-ac76-9ae3b62cb68b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/modules",
        "type": "directory",
        "artifact_id": "076a218a-41b3-4286-acf5-76bec6874381",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src",
        "type": "directory",
        "artifact_id": "61cb613f-ebcb-4b52-a2cc-7062c8512af0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/install",
        "type": "directory",
        "artifact_id": "bb1bf02a-b00c-4bcd-aca8-5495dd6e9593",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/logging",
        "type": "directory",
        "artifact_id": "7598fd3b-7d2b-4b36-ac7e-0cad6cdccace",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox",
        "type": "directory",
        "artifact_id": "507d71d3-2860-4782-8500-b403c1db95ea",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/config",
        "type": "directory",
        "artifact_id": "524913f8-78ee-441f-a70c-1f5221efc385",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/modules",
        "type": "directory",
        "artifact_id": "5411ed35-a808-461e-a36a-630e0fcce0ad",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/server",
        "type": "directory",
        "artifact_id": "1cfd9670-09fa-400d-bf1d-57e506247df0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/service",
        "type": "directory",
        "artifact_id": "9a9187be-b4f6-4df5-b888-886e5e758f2c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/singbox/utils",
        "type": "directory",
        "artifact_id": "e3531a6d-49fc-43a6-80d2-ac2df238f7da",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "82056769-1d43-47ec-8245-81b3574c1120",
        "metadata": {}
      },
      {
        "path": "plans",
        "type": "directory",
        "artifact_id": "7916be19-9996-46cd-ad04-83ef3278f2fa",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "d132b9e0-99db-448f-8898-c11b8ee96a44",
        "metadata": {}
      },
      {
        "path": "src/install",
        "type": "directory",
        "artifact_id": "4489a109-7e7b-48e3-9014-bb75e2d7774f",
        "metadata": {}
      },
      {
        "path": "src/install/wizard.py",
        "type": "file",
        "artifact_id": "5834f983-a4e6-4710-9842-f43cec00331a",
        "metadata": {}
      },
      {
        "path": "src/logging",
        "type": "directory",
        "artifact_id": "c36f2092-dbb6-43f8-b54d-376d981f32fe",
        "metadata": {}
      },
      {
        "path": "src/logging/setup.py",
        "type": "file",
        "artifact_id": "677a212c-63a8-40e7-a54b-a2f241e741db",
        "metadata": {}
      },
      {
        "path": "src/main.py",
        "type": "file",
        "artifact_id": "23d780a1-66e4-4772-9f31-8d2af12ff9ff",
        "metadata": {}
      },
      {
        "path": "src/singbox",
        "type": "directory",
        "artifact_id": "4f6b9ef3-2b7d-4393-9337-1427d7fbf70c",
        "metadata": {}
      },
      {
        "path": "src/singbox/config",
        "type": "directory",
        "artifact_id": "43c65c85-ac32-4d79-b0fe-41758674c61d",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/fetch.py",
        "type": "file",
        "artifact_id": "33a28c5c-f271-4cae-96a4-ccbe9dbdc461",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/generate.py",
        "type": "file",
        "artifact_id": "91539f4e-ba77-4e19-b4a8-e087dded38b2",
        "metadata": {}
      },
      {
        "path": "src/singbox/config/protocol.py",
        "type": "file",
        "artifact_id": "e3cf96e3-5267-40d0-836b-3047188cd317",
        "metadata": {}
      },
      {
        "path": "src/singbox/modules",
        "type": "directory",
        "artifact_id": "b91c366b-c7fd-4fbf-997e-92a5e7b4db6d",
        "metadata": {}
      },
      {
        "path": "src/singbox/modules/__init__.py",
        "type": "file",
        "artifact_id": "7b8dfcf6-43b7-4805-92c2-f8a6a84e9dd0",
        "metadata": {}
      },
      {
        "path": "src/singbox/server",
        "type": "directory",
        "artifact_id": "c965abac-e1c5-48d7-9728-c050ffbe8bbd",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/exclusions.py",
        "type": "file",
        "artifact_id": "3f799ddc-441e-4bc3-aaa2-fb0498cbff74",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/management.py",
        "type": "file",
        "artifact_id": "be5f4b61-2038-42d1-b15e-3573eb6cfb93",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/selection.py",
        "type": "file",
        "artifact_id": "9f841ee3-87cd-440f-9ee6-1c45c2b141e2",
        "metadata": {}
      },
      {
        "path": "src/singbox/server/state.py",
        "type": "file",
        "artifact_id": "0730d4b7-9d0c-4f51-bbed-d09bcb334f9a",
        "metadata": {}
      },
      {
        "path": "src/singbox/service",
        "type": "directory",
        "artifact_id": "d157b752-1ea7-4a16-9965-fb8e8148fe6e",
        "metadata": {}
      },
      {
        "path": "src/singbox/service/manage.py",
        "type": "file",
        "artifact_id": "cab45882-369d-494a-96c6-f4d7bd553457",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils",
        "type": "directory",
        "artifact_id": "f98f0022-927b-4988-8243-1dc3bad566b2",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/file.py",
        "type": "file",
        "artifact_id": "53227d72-4915-4e4c-bd00-b04a8f79855b",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/id.py",
        "type": "file",
        "artifact_id": "18224aab-7e43-4081-901a-eee14b3bac3a",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/module_installer.py",
        "type": "file",
        "artifact_id": "a0687003-e854-4e44-b4f5-c415b8df561d",
        "metadata": {}
      },
      {
        "path": "src/singbox/utils/temp.py",
        "type": "file",
        "artifact_id": "6af3105d-23a2-4907-8ceb-ecd67f0d406c",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "src.main",
      "path": "src/main.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Update sing-box configuration from a remote JSON source.",
      "artifact_id": "929e5505-6a04-4719-8118-d5927940414c"
    },
    {
      "module_id": "src.install.wizard",
      "path": "src/install/wizard.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "",
      "artifact_id": "5cdaa28f-d122-4a6c-ba0a-3f904ca12917"
    },
    {
      "module_id": "src.logging.setup",
      "path": "src/logging/setup.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fa777abd-e03f-43a9-b93e-73a1f9795fb4"
    },
    {
      "module_id": "src.singbox.service.manage",
      "path": "src/singbox/service/manage.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1d39582e-5176-40e4-a800-a114f85f6ea3"
    },
    {
      "module_id": "src.singbox.config.generate",
      "path": "src/singbox/config/generate.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "1cddef64-cdc5-4581-8d85-2877ee00addc"
    },
    {
      "module_id": "src.singbox.config.fetch",
      "path": "src/singbox/config/fetch.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "935ac883-73b0-4643-a621-97ab82ca4eb9"
    },
    {
      "module_id": "src.singbox.config.protocol",
      "path": "src/singbox/config/protocol.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "030c6fa0-5053-4738-b5b6-a4c08f6b0d67"
    },
    {
      "module_id": "src.singbox.server.selection",
      "path": "src/singbox/server/selection.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2676ae42-343d-4f03-b244-002f4002be18"
    },
    {
      "module_id": "src.singbox.server.exclusions",
      "path": "src/singbox/server/exclusions.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "a348b983-ae61-428a-a416-362ac86b7803"
    },
    {
      "module_id": "src.singbox.server.state",
      "path": "src/singbox/server/state.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "1aeafe80-0aec-450d-a7f9-fc452da73386"
    },
    {
      "module_id": "src.singbox.server.management",
      "path": "src/singbox/server/management.py",
      "category": "core",
      "functions": 11,
      "classes": 0,
      "summary": "",
      "artifact_id": "5cbd4dd5-8c31-4776-a237-b9196bd3ffcf"
    },
    {
      "module_id": "src.singbox.utils.file",
      "path": "src/singbox/utils/file.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b9008b0d-efc9-444c-a908-ecd4cb8a1cf9"
    },
    {
      "module_id": "src.singbox.utils.id",
      "path": "src/singbox/utils/id.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "96510be4-4378-402a-a7c5-6a01281c0630"
    },
    {
      "module_id": "src.singbox.utils.module_installer",
      "path": "src/singbox/utils/module_installer.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "57691546-b393-4ccc-a6a0-8506f6c6bd7c"
    },
    {
      "module_id": "src.singbox.utils.temp",
      "path": "src/singbox/utils/temp.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b4f9b689-dd9f-4feb-b93d-5af19be87bea"
    },
    {
      "module_id": "src.singbox.modules.__init__",
      "path": "src/singbox/modules/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "928e2786-9d94-4c6f-8c79-6479fa65e4e6"
    }
  ],
  "modules": [
    {
      "module_id": "src.main",
      "path": "src/main.py",
      "category": "core",
      "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function to update sing-box configuration.",
          "line_range": [
            52,
            272
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_config_after_exclusion",
          "docstring": "Generate configuration after applying exclusions.",
          "line_range": [
            274,
            311
          ],
          "parameters": [
            "json_data",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "parse_comma_separated_values",
          "docstring": "",
          "line_range": [
            54,
            55
          ],
          "parameters": [
            "value"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [],
        "parse_comma_separated_values": [
          "value.split",
          "v.strip",
          "int"
        ],
        "generate_config_after_exclusion": [
          "validate_protocol",
          "chr",
          "logging.warning",
          "enumerate",
          "logging.info",
          "isinstance",
          "outbounds.append",
          "generate_config",
          "len",
          "apply_exclusions",
          "excluded_ips.append",
          "load_exclusions",
          "outbound.get"
        ]
      },
      "dependencies": [
        "apply_exclusions",
        "argparse",
        "clear_exclusions",
        "exclude_servers",
        "fetch_json",
        "generate_config",
        "generate_server_id",
        "generate_temp_config",
        "json",
        "list_servers",
        "load_exclusions",
        "load_selected_config",
        "logging",
        "logging_setup",
        "manage_service",
        "os",
        "remove_exclusions",
        "save_selected_config",
        "select_config",
        "setup_logging",
        "singbox.config.fetch",
        "singbox.config.generate",
        "singbox.config.protocol",
        "singbox.server.exclusions",
        "singbox.server.selection",
        "singbox.server.state",
        "singbox.service.manage",
        "singbox.utils.id",
        "subprocess",
        "sys",
        "tempfile",
        "validate_config_file",
        "validate_protocol",
        "view_exclusions"
      ],
      "hash": "b98dbc47e38f1ef7d750ae5a8b8b5ace3e1b743eb98c885f2fd2ca170f80399b",
      "artifact_id": "929e5505-6a04-4719-8118-d5927940414c"
    },
    {
      "module_id": "src.install.wizard",
      "path": "src/install/wizard.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "check_inquirer_version",
          "docstring": "Check if python-inquirer is installed and log its version.",
          "line_range": [
            18,
            33
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_dedicated_user",
          "docstring": "",
          "line_range": [
            44,
            56
          ],
          "parameters": [
            "username"
          ],
          "decorators": []
        },
        {
          "name": "set_directory_permissions",
          "docstring": "",
          "line_range": [
            58,
            61
          ],
          "parameters": [
            "username",
            "directories"
          ],
          "decorators": []
        },
        {
          "name": "create_virtualenv",
          "docstring": "",
          "line_range": [
            63,
            70
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "activate_virtualenv",
          "docstring": "",
          "line_range": [
            72,
            75
          ],
          "parameters": [
            "venv_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "Compute SHA-256 hash of a file.",
          "line_range": [
            77,
            85
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_files_to_installation_path",
          "docstring": "Copy files to destination, overwriting if contents differ.",
          "line_range": [
            87,
            119
          ],
          "parameters": [
            "source_files",
            "destination_path"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list",
          "docstring": "Fetch server list using update_singbox.py -l.",
          "line_range": [
            121,
            152
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list_with_exclusions",
          "docstring": "Fetch server list and mark exclusions.",
          "line_range": [
            154,
            165
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "parse_arguments",
          "docstring": "",
          "line_range": [
            167,
            174
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "validate_url",
          "docstring": "",
          "line_range": [
            176,
            185
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "ensure_install_path",
          "docstring": "",
          "line_range": [
            187,
            192
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "setup_systemd_service",
          "docstring": "",
          "line_range": [
            194,
            238
          ],
          "parameters": [
            "install_path",
            "timer_frequency",
            "service_verbosity",
            "install_link"
          ],
          "decorators": []
        },
        {
          "name": "run_installation_wizard",
          "docstring": "",
          "line_range": [
            240,
            403
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "render_choice",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "self",
            "choice",
            "pointer"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CustomRender",
          "docstring": "Custom renderer to visually distinguish excluded servers.",
          "line_range": [
            35,
            42
          ],
          "methods": [
            {
              "name": "render_choice",
              "docstring": "",
              "line_range": [
                37,
                42
              ],
              "parameters": [
                "self",
                "choice",
                "pointer"
              ]
            }
          ],
          "bases": [
            "ConsoleRender"
          ]
        }
      ],
      "callgraph": {
        "check_inquirer_version": [
          "logging.warning",
          "print",
          "logging.error",
          "logging.info"
        ],
        "render_choice": [
          "load_exclusions"
        ],
        "create_dedicated_user": [
          "subprocess.run",
          "open",
          "print",
          "sudoers_file.write"
        ],
        "set_directory_permissions": [
          "subprocess.run",
          "print"
        ],
        "create_virtualenv": [
          "subprocess.run",
          "print"
        ],
        "activate_virtualenv": [
          "subprocess.run"
        ],
        "get_file_hash": [
          "sha256.update",
          "open",
          "f.read",
          "sha256.hexdigest",
          "hashlib.sha256",
          "iter"
        ],
        "copy_files_to_installation_path": [
          "get_file_hash",
          "shutil.copytree",
          "shutil.copy",
          "os.makedirs",
          "print",
          "os.walk"
        ],
        "get_server_list": [
          "logging.warning",
          "logging.error",
          "logging.info",
          "subprocess.run",
          "re.sub",
          "seen_names.add",
          "print",
          "server_list.append",
          "line.split",
          "len",
          "set"
        ],
        "get_server_list_with_exclusions": [
          "load_exclusions",
          "get_server_list",
          "check_inquirer_version"
        ],
        "parse_arguments": [
          "range",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument"
        ],
        "validate_url": [
          "re.match",
          "re.compile"
        ],
        "ensure_install_path": [
          "print",
          "os.makedirs"
        ],
        "setup_systemd_service": [
          "open",
          "subprocess.run",
          "print",
          "timer_file.write",
          "service_file.write"
        ],
        "run_installation_wizard": [
          "re.sub",
          "print",
          "logging.error",
          "create_virtualenv",
          "subprocess.run",
          "setup_systemd_service",
          "activate_virtualenv",
          "copy_files_to_installation_path",
          "all_servers.index",
          "logging.info",
          "inquirer.List",
          "inquirer.prompt",
          "parse_arguments",
          "map",
          "inquirer.Checkbox",
          "selected_indices.append",
          "view_exclusions",
          "CustomRender",
          "get_server_list",
          "get_server_list_with_exclusions",
          "ensure_install_path",
          "inquirer.Text",
          "validate_url"
        ]
      },
      "dependencies": [
        "ConsoleRender",
        "argparse",
        "hashlib",
        "importlib.metadata",
        "inquirer",
        "inquirer.render.console",
        "load_exclusions",
        "logging",
        "os",
        "re",
        "shutil",
        "singbox.server.exclusions",
        "subprocess",
        "sys",
        "view_exclusions"
      ],
      "hash": "098509c9a1c88e5f8bdcfd46f0d420327984d912c745192534a568d5ee1f46cc",
      "artifact_id": "5cdaa28f-d122-4a6c-ba0a-3f904ca12917"
    },
    {
      "module_id": "src.logging.setup",
      "path": "src/logging/setup.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_logging",
          "docstring": "Configure logging with file and syslog handlers.",
          "line_range": [
            5,
            27
          ],
          "parameters": [
            "debug_level",
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        },
        {
          "name": "rotate_logs",
          "docstring": "Rotate log file if it exceeds max_log_size.",
          "line_range": [
            29,
            41
          ],
          "parameters": [
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_logging": [
          "logger.addHandler",
          "logging.warning",
          "logging.Formatter",
          "rotate_logs",
          "file_handler.setFormatter",
          "syslog_handler.setFormatter",
          "logging.FileHandler",
          "logging.getLogger",
          "logger.setLevel"
        ],
        "rotate_logs": [
          "range",
          "open",
          "os.rename"
        ]
      },
      "dependencies": [
        "logging",
        "logging.handlers",
        "os"
      ],
      "hash": "8e9da24732a22dc62cbdc7f05b51625a8831cdf455cbad682751a260fd42f5fe",
      "artifact_id": "fa777abd-e03f-43a9-b93e-73a1f9795fb4"
    },
    {
      "module_id": "src.singbox.service.manage",
      "path": "src/singbox/service/manage.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "manage_service",
          "docstring": "Restart or start sing-box service.",
          "line_range": [
            5,
            17
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "manage_service": [
          "error",
          "subprocess.run",
          "shutil.which",
          "EnvironmentError",
          "info"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "logging",
        "shutil",
        "subprocess"
      ],
      "hash": "61ba558fa807efd84f9d47c333da283ee45bc6578ad36fb7e1cb1e6b21f64217",
      "artifact_id": "1d39582e-5176-40e4-a800-a114f85f6ea3"
    },
    {
      "module_id": "src.singbox.config.generate",
      "path": "src/singbox/config/generate.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_config",
          "docstring": "Generate sing-box configuration from template.",
          "line_range": [
            6,
            74
          ],
          "parameters": [
            "outbounds",
            "template_file",
            "config_file",
            "backup_file",
            "excluded_ips"
          ],
          "decorators": []
        },
        {
          "name": "generate_temp_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 json-\u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0430 \u0434\u043b\u044f dry-run \u0431\u0435\u0437 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "outbounds",
            "template_file",
            "excluded_ips"
          ],
          "decorators": []
        },
        {
          "name": "validate_config_file",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433-\u0444\u0430\u0439\u043b \u0447\u0435\u0440\u0435\u0437 sing-box check. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 (bool, \u0432\u044b\u0432\u043e\u0434).",
          "line_range": [
            103,
            107
          ],
          "parameters": [
            "config_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_config": [
          "f.write",
          "enumerate",
          "FileNotFoundError",
          "o.get",
          "json.dumps",
          "error",
          "open",
          "subprocess.run",
          "current_config_file.read",
          "json.load",
          "os.rename",
          "info",
          "next",
          "rule.get",
          "len",
          "current_config.strip",
          "config.strip",
          "outbound.get"
        ],
        "generate_temp_config": [
          "enumerate",
          "FileNotFoundError",
          "o.get",
          "json.dumps",
          "error",
          "open",
          "json.load",
          "rule.get",
          "next",
          "outbound.get"
        ],
        "validate_config_file": [
          "subprocess.run"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "json",
        "logging",
        "os",
        "subprocess"
      ],
      "hash": "3b67ac25c1d990aa6d9fd5f64b228315c5ff1ea4cfc3887afbade5df3aa18990",
      "artifact_id": "1cddef64-cdc5-4581-8d85-2877ee00addc"
    },
    {
      "module_id": "src.singbox.config.fetch",
      "path": "src/singbox/config/fetch.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "fetch_json",
          "docstring": "Fetch JSON from URL with optional proxy.",
          "line_range": [
            5,
            30
          ],
          "parameters": [
            "url",
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "select_config",
          "docstring": "Select proxy configuration by remarks or index.",
          "line_range": [
            32,
            54
          ],
          "parameters": [
            "json_data",
            "remarks",
            "index"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fetch_json": [
          "requests.get",
          "error",
          "response.json",
          "response.raise_for_status"
        ],
        "select_config": [
          "isinstance",
          "item.get",
          "outbound.get",
          "ValueError"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "requests"
      ],
      "hash": "65416cca5dc4208552782aee9b9009344ec74a145509c6271cd7b7cd43f35001",
      "artifact_id": "935ac883-73b0-4643-a621-97ab82ca4eb9"
    },
    {
      "module_id": "src.singbox.config.protocol",
      "path": "src/singbox/config/protocol.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_protocol",
          "docstring": "Validate protocol and extract parameters.",
          "line_range": [
            3,
            88
          ],
          "parameters": [
            "config",
            "supported_protocols"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_protocol": [
          "outbound.update",
          "error",
          "config.get",
          "ValueError",
          "outbound.get"
        ]
      },
      "dependencies": [
        "error",
        "logging",
        "warning"
      ],
      "hash": "e09902feb50c53274e545ea215dc1e76a29dffba56756398efb849569a6886a8",
      "artifact_id": "030c6fa0-5053-4738-b5b6-a4c08f6b0d67"
    },
    {
      "module_id": "src.singbox.server.selection",
      "path": "src/singbox/server/selection.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.",
          "line_range": [
            1,
            20
          ],
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "server.get",
          "isinstance",
          "print"
        ]
      },
      "dependencies": [],
      "hash": "f611a62f358dff8f007b6c3457db7f38139e05395bfcc10a4cd4139437219864",
      "artifact_id": "2676ae42-343d-4f03-b244-002f4002be18"
    },
    {
      "module_id": "src.singbox.server.exclusions",
      "path": "src/singbox/server/exclusions.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_exclusions",
          "docstring": "Load exclusions from the exclusion file.",
          "line_range": [
            6,
            12
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_exclusions",
          "docstring": "Save exclusions to the exclusion file.",
          "line_range": [
            14,
            19
          ],
          "parameters": [
            "exclusions"
          ],
          "decorators": []
        },
        {
          "name": "exclude_servers",
          "docstring": "Exclude servers by index or name, supporting wildcards.",
          "line_range": [
            21,
            47
          ],
          "parameters": [
            "json_data",
            "exclude_list",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "remove_exclusions",
          "docstring": "Remove exclusions by index or name.",
          "line_range": [
            49,
            68
          ],
          "parameters": [
            "exclude_list",
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "view_exclusions",
          "docstring": "View current exclusions.",
          "line_range": [
            70,
            77
          ],
          "parameters": [
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "clear_exclusions",
          "docstring": "Clear all current exclusions.",
          "line_range": [
            79,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_exclusions": [
          "open",
          "os.getenv",
          "json.load"
        ],
        "save_exclusions": [
          "open",
          "os.getenv",
          "json.dump"
        ],
        "exclude_servers": [
          "enumerate",
          "new_exclusions.append",
          "json_data.get",
          "server.get",
          "save_exclusions",
          "int",
          "print",
          "fnmatch.fnmatch",
          "len",
          "item.isdigit",
          "load_exclusions"
        ],
        "remove_exclusions": [
          "enumerate",
          "json_data.get",
          "server.get",
          "save_exclusions",
          "int",
          "print",
          "len",
          "item.startswith",
          "load_exclusions"
        ],
        "view_exclusions": [
          "print",
          "json.dumps",
          "load_exclusions",
          "exclusion.get"
        ],
        "clear_exclusions": [
          "os.getenv",
          "os.remove",
          "print"
        ]
      },
      "dependencies": [
        "datetime",
        "fnmatch",
        "json",
        "os"
      ],
      "hash": "0a5085a37b6aac213997b35dbdba2d71929565d53607f14beee0614e4f1d2176",
      "artifact_id": "a348b983-ae61-428a-a416-362ac86b7803"
    },
    {
      "module_id": "src.singbox.server.state",
      "path": "src/singbox/server/state.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": [
            5,
            11
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "Save selected configuration to file.",
          "line_range": [
            13,
            18
          ],
          "parameters": [
            "selected"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_selected_config": [
          "open",
          "os.getenv",
          "json.load"
        ],
        "save_selected_config": [
          "open",
          "os.getenv",
          "json.dump"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": "3c05410db1a7b992040ea50c1f185845719a6ef5c66a9eec208aa332fc5a7ad5",
      "artifact_id": "1aeafe80-0aec-450d-a7f9-fc452da73386"
    },
    {
      "module_id": "src.singbox.server.management",
      "path": "src/singbox/server/management.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.",
          "line_range": [
            15,
            34
          ],
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "handle_temp_file",
          "docstring": "Handle temporary file creation and validation.",
          "line_range": [
            36,
            44
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        },
        {
          "name": "load_exclusions",
          "docstring": "Load exclusions from the exclusion file.",
          "line_range": [
            46,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_exclusions",
          "docstring": "Save exclusions to the exclusion file.",
          "line_range": [
            53,
            56
          ],
          "parameters": [
            "exclusions"
          ],
          "decorators": []
        },
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": [
            58,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "Save selected configuration to file.",
          "line_range": [
            65,
            68
          ],
          "parameters": [
            "selected"
          ],
          "decorators": []
        },
        {
          "name": "apply_exclusions",
          "docstring": "Apply exclusions to the list of server configurations.",
          "line_range": [
            70,
            80
          ],
          "parameters": [
            "configs",
            "excluded_ids",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "exclude_servers",
          "docstring": "Exclude servers by index or name, supporting wildcards.",
          "line_range": [
            82,
            111
          ],
          "parameters": [
            "json_data",
            "exclude_list",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "remove_exclusions",
          "docstring": "Remove exclusions by index or name.",
          "line_range": [
            113,
            134
          ],
          "parameters": [
            "exclude_list",
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "view_exclusions",
          "docstring": "View current exclusions.",
          "line_range": [
            136,
            143
          ],
          "parameters": [
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "clear_exclusions",
          "docstring": "Clear all current exclusions.",
          "line_range": [
            145,
            151
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "server.get",
          "isinstance",
          "print"
        ],
        "handle_temp_file": [
          "tempfile.gettempdir",
          "json.dumps",
          "shutil.move",
          "open",
          "ValueError",
          "validate_fn",
          "f.write"
        ],
        "load_exclusions": [
          "open",
          "json.load"
        ],
        "save_exclusions": [
          "handle_temp_file"
        ],
        "load_selected_config": [
          "open",
          "json.load"
        ],
        "save_selected_config": [
          "handle_temp_file"
        ],
        "apply_exclusions": [
          "enumerate",
          "config.get",
          "valid_configs.append",
          "print",
          "generate_server_id"
        ],
        "exclude_servers": [
          "enumerate",
          "generate_server_id",
          "new_exclusions.append",
          "json_data.get",
          "server.get",
          "save_exclusions",
          "int",
          "print",
          "fnmatch.fnmatch",
          "len",
          "item.isdigit",
          "load_exclusions"
        ],
        "remove_exclusions": [
          "enumerate",
          "json_data.get",
          "server.get",
          "save_exclusions",
          "int",
          "print",
          "len",
          "generate_server_id",
          "item.startswith",
          "load_exclusions"
        ],
        "view_exclusions": [
          "print",
          "json.dumps",
          "load_exclusions",
          "exclusion.get"
        ],
        "clear_exclusions": [
          "print",
          "os.remove"
        ]
      },
      "dependencies": [
        "datetime",
        "fnmatch",
        "generate_server_id",
        "hashlib",
        "json",
        "os",
        "shutil",
        "singbox.utils.id",
        "sys",
        "tempfile"
      ],
      "hash": "35f6388402af7f5424969567dc4da8f749008bec48c50f1671a1f00731f68a08",
      "artifact_id": "5cbd4dd5-8c31-4776-a237-b9196bd3ffcf"
    },
    {
      "module_id": "src.singbox.utils.file",
      "path": "src/singbox/utils/file.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "handle_temp_file",
          "docstring": "Write content to a temporary file, validate, and move to target path.",
          "line_range": [
            7,
            20
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "handle_temp_file": [
          "tempfile.gettempdir",
          "json.dumps",
          "shutil.move",
          "open",
          "error",
          "ValueError",
          "validate_fn",
          "f.write"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": "8f415c612ff475b6360500db31b6c41c5cd481824d255df51d2b08223d5a211d",
      "artifact_id": "b9008b0d-efc9-444c-a908-ecd4cb8a1cf9"
    },
    {
      "module_id": "src.singbox.utils.id",
      "path": "src/singbox/utils/id.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_server_id",
          "docstring": "Generate a unique ID for a server based on tag, protocol, and port.",
          "line_range": [
            3,
            6
          ],
          "parameters": [
            "server"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_server_id": [
          "hashlib.sha256",
          "server.get",
          "identifier.encode"
        ]
      },
      "dependencies": [
        "hashlib"
      ],
      "hash": "9c7f1c2da7bd5c2592c8ec2ad41cc8b326a5d5a3b5a747d95148e75fcedb11c6",
      "artifact_id": "96510be4-4378-402a-a7c5-6a01281c0630"
    },
    {
      "module_id": "src.singbox.utils.module_installer",
      "path": "src/singbox/utils/module_installer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "install_dependencies",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_dependencies": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys"
      ],
      "hash": "85f0a2ced8f559a0da8d521a551fd94c629660b89b8398f51bda616c2cf0b0bd",
      "artifact_id": "57691546-b393-4ccc-a6a0-8506f6c6bd7c"
    },
    {
      "module_id": "src.singbox.utils.temp",
      "path": "src/singbox/utils/temp.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "handle_temp_file",
          "docstring": "Handle temporary file creation and validation.",
          "line_range": [
            6,
            14
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "handle_temp_file": [
          "tempfile.gettempdir",
          "json.dumps",
          "shutil.move",
          "open",
          "ValueError",
          "validate_fn",
          "f.write"
        ]
      },
      "dependencies": [
        "json",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": "cb468d75c1a205575235528acf8c920d9aedea654e47f73ce854ddaddd0bd3a3",
      "artifact_id": "b4f9b689-dd9f-4feb-b93d-5af19be87bea"
    },
    {
      "module_id": "src.singbox.modules.__init__",
      "path": "src/singbox/modules/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "928e2786-9d94-4c6f-8c79-6479fa65e4e6"
    }
  ]
}