{
  "module_id": "update_singbox",
  "path": "update_singbox.py",
  "category": "core",
  "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)",
  "functions": [
    {
      "name": "main",
      "docstring": "Main function to update sing-box configuration.",
      "line_range": [
        49,
        269
      ],
      "parameters": [],
      "decorators": []
    },
    {
      "name": "generate_config_after_exclusion",
      "docstring": "Generate configuration after applying exclusions.",
      "line_range": [
        271,
        308
      ],
      "parameters": [
        "json_data",
        "debug_level"
      ],
      "decorators": []
    },
    {
      "name": "parse_comma_separated_values",
      "docstring": "",
      "line_range": [
        51,
        52
      ],
      "parameters": [
        "value"
      ],
      "decorators": []
    }
  ],
  "classes": [],
  "callgraph": {
    "main": [],
    "parse_comma_separated_values": [
      "v.strip",
      "value.split",
      "int"
    ],
    "generate_config_after_exclusion": [
      "outbound.get",
      "load_exclusions",
      "logging.warning",
      "generate_config",
      "enumerate",
      "isinstance",
      "chr",
      "validate_protocol",
      "logging.info",
      "apply_exclusions",
      "excluded_ips.append",
      "len",
      "outbounds.append"
    ]
  },
  "dependencies": [
    "apply_exclusions",
    "argparse",
    "clear_exclusions",
    "exclude_servers",
    "fetch_json",
    "generate_config",
    "generate_server_id",
    "generate_temp_config",
    "json",
    "list_servers",
    "load_exclusions",
    "load_selected_config",
    "logging",
    "logging_setup",
    "manage_service",
    "modules.config_fetch",
    "modules.config_generate",
    "modules.protocol_validation",
    "modules.server_management",
    "modules.service_manage",
    "os",
    "remove_exclusions",
    "save_selected_config",
    "select_config",
    "setup_logging",
    "subprocess",
    "sys",
    "tempfile",
    "validate_config_file",
    "validate_protocol",
    "view_exclusions"
  ],
  "hash": "f4b1304d1e5bece8316aa45017ed814887a9c4b671fcada45ccf408faac92bcf",
  "artifact_id": "e8754d0b-159d-4c2b-8c3d-953894fc380d"
}